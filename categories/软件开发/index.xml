<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>软件开发 on 暗网探秘</title>
    <link>https://anwangtanmi.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 软件开发 on 暗网探秘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 25 Sep 2019 18:05:27 +0800</lastBuildDate>
    <atom:link href="https://anwangtanmi.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[译文]构建一个高性能现代网络爬虫</title>
      <link>https://anwangtanmi.github.io/posts/3443ddf5de7ecce6bfcd021fc6cbcc86/</link>
      <pubDate>Wed, 25 Sep 2019 18:05:27 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/3443ddf5de7ecce6bfcd021fc6cbcc86/</guid>
      <description>原文链接：&#xA;https://creekorful.me/building-fast-modern-web-crawler/ 文章目录 构建一个高性能现代网络爬虫 什么是爬虫？ Trandoshan：一个暗网爬虫 什么是暗网？ Trandoshan是如何设计的？ 怎么运行Trandoshan？ 如何使用Trandoshan？ 构建一个高性能现代网络爬虫 PS:本文为Building a fast modern web crawker的中文译文。&#xA;我一直对于爬虫具有很强烈的兴趣。我曾经使用过多种语言比如C++，Node.JS，Python等等来撰写爬虫程序，并且更吸引我的是爬虫背后的理论。&#xA;但是首先我们要讨论的问题是：什么是爬虫？&#xA;什么是爬虫？ 爬虫是一个通过浏览整个因特网从而去定位一些存在的页面、图片、PDF等等的计算机程序，并且允许用户去通过一个搜索引擎去检索它们。这就是隐藏在著名的Google搜索引擎背后的技术。&#xA;一个高性能的爬虫程序通常被设计为分布式结构：区别于运行在特定机器上的单个程序，它会在云上的多台机器上运行多个实例，这样的结构带来更好的任务再分配、更好的性能和更大的带宽。（ps:这里使用吞吐量会不会更合适？）&#xA;但是分布式软件并不是没有瑕疵的：一些因素可能会给你的的程序带来额外的延迟、或者可能会降低你的程序的性能，比如说网络的延迟、同步的问题、缺乏设计的通信协议等等。&#xA;为了追求更好的性能，一个分布式的爬虫应该有足够良好的设计：这让消除许多性能上的瓶颈成为可能，就像法国的海军上将Olivier Lajous说的：&#xA;一个链子的强度取决于最薄弱的一环。 Trandoshan：一个暗网爬虫 你可能知道很多非常成功的网络爬虫，比如Google。所以我并不想去做一个同样的东西。我当下想要去构建一个基于暗网的爬虫。（ps:trandoshan是星球大战中的狩猎种族）&#xA;什么是暗网？ 没必要去使用很多术语去形容什么是暗网，要写起暗网的来龙去脉可能要新建一篇文章。&#xA;Web是由三层结构组成的，我们可以将其视为一座冰山：&#xA;第一层：表面网络，或者说是净网是我们每天最常接触的网络的那部分。它们被一些炙手可热的网络爬虫比如Google，Qwant，Duckduckgo等等所定位。 第二层：更深层次的网络，是由一些无法被定位的网页组成的，这意味着你是用搜索引擎都找不到这些网页，但是你却可以直接使用URL和IP地址来访问这些页面。 第三层：暗网，这是一类你是用浏览器都无法访问到的网页。你需要使用特定的应用程序或者特定的代理才可以访问。最出名的暗网是隐藏在洋葱头网络下的。你可以使用以.onion结尾的URL去访问它们。 Trandoshan是如何设计的？ 在分别讲解这些进程的作用之前，我觉得首先要讲清楚的是这些进程之间如何通信。&#xA;进程间通讯（Inter Process Communication, IPC），主要是通过使用一个基于生产者/消费者模式的名为NATS（图中黄色的线）的通讯协议，每个在NATS中的消息都有一个主题（就像邮件里的那样），支持其他进程去识别并且仅读取它们想要读取的消息。NATS支持扩展：比如可以支持十个爬虫进程从一个消息服务器并发的读取消息（许多实例可以同时运行而不出任何bug）并因此可以提升性能。&#xA;Trandoshan分为四个主要的进程：&#xA;爬虫：用于爬取页面的进程：它们从NATS读取将要爬取的页面的URL（消息的主题是”todoUrls”），爬取它，并且获取整个页面中显示的全部URL，并且发送这些URL到NATS中（这些消息的主题是”crawledUrls”），而页面的内容则以主题”content”发送到NATS。 调度器：这个进程用于检查URL：它读取主题为”crawledUrls”，检查其是否是已经爬取过的URL，如果还没有被爬取过，则将URL以主题”todoUrls”发送到NATS。 持久器：这个进程用于网页内容的构建：它读取以”content”为主题的消息，并且存储到非关系型数据库中（MongoDB） 接口：给其他进程开放用于聚合数据的进程。比如开放给调度器的用于确定URL是否被爬取过的接口，相比于调度器直接和数据库进行交互，更倾向于调度器和API们交互。 不同的进程们都是使用Go语言进行编写的：因为它的性能很好（可以被编译为二进制文件）并且有很多的库。Go是用来构建高性能的分布式系统的完美解决方案。&#xA;Trandoshan的源码在github的这里：https://github.com/trandoshan-io&#xA;怎么运行Trandoshan？ 就像之前讲过的一样，Trandoshan被设计为运行在一个分布式的系统上，并且可以使用Docker的镜像来运行，这对于云来说是很好的支持。事实上我整理了一个存储着所有部署需要的配置文件的仓库，可以用于部署Trandoshan实例在K8S上。这些文件在这里：https://github.com/trandoshan-io/k8s 并且docker的镜像也都上传到了Docker Hub。&#xA;如果你拥有一个配置成功的kubectl（K8S的控制程序），你可以通过一条简单的命令部署Trandoshan：&#xA;./bootstrap.sh 不然的话你可以使用Docker和docker-compose在本地运行Trandoshan。在trandoshan-parent这个仓库中有构建文件和shell脚本，所以你可以使用以下命令来运行这个应用：&#xA;./deploy.sh 如何使用Trandoshan？ 现在有一个小型的Angular应用去检索定位内容。这个页面使用了API进程去完成对于数据库的检索工作。</description>
    </item>
    <item>
      <title>Bean named ‘xxx’ is expected to be of type ‘cn.xxx’ but was actually of type ‘com.sun.proxy.$Proxy22</title>
      <link>https://anwangtanmi.github.io/posts/9007e0f1b2fee6728d856ffc6133a852/</link>
      <pubDate>Wed, 13 Mar 2019 09:17:12 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/9007e0f1b2fee6728d856ffc6133a852/</guid>
      <description>在学习spring aop中的动态代理时，碰到了一个问题：&#xA;“名为“xxx”的Bean的类型应该是“com”.xxx’，但实际上是’com.sun.proxy.$Proxy22’类型的。”&#xA;spring使用的动态代理有两种：JDK Proxy 和CGLIB。&#xA;使用前者必须实现至少一个接口才能实现对方法的拦截。&#xA;使用后者需要两个jar包：asm.jar和cglib.jar&#xA;ApplicationContext ac = new ClassPathXmlApplicationContext(&#34;applicationContext.xml&#34;); System.out.println(ac); UserServiceImpl bean = ac.getBean(&#34;userService&#34;,UserServiceImpl.class); **问题出在这句代码上 UserServiceImpl bean = ac.getBean(“userService”,UserServiceImpl.class);不能用接口的实现类（ UserServiceImpl）来转换Proxy的实现类，它们是同级，应该用共同的接口(UserService)来转换 **&#xA;把代码改为 UserService bean = ac.getBean(“userService”,UserService.class);&#xA;简单地说就是要用该类的接口来转换，而且必须是该类的接口</description>
    </item>
    <item>
      <title>springboot开发环境低引起的依赖冲突问题</title>
      <link>https://anwangtanmi.github.io/posts/61bd743eaa38509430a76ec7164443d0/</link>
      <pubDate>Thu, 28 Feb 2019 09:06:29 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/61bd743eaa38509430a76ec7164443d0/</guid>
      <description>在我初学springboot的时候，碰到了一个深坑，记录下过程。&#xA;开发环境:eclipse4.6&#xA;刚在springboot官网上下载并导入一个springboot项目，就发现pom.xml文件报错，为了解决后续隐藏的麻烦（主观上看着也不爽），于是查到了原因：初步确定是Eclipse中自带的Maven插件版本太低的原因（我用的Eclipse是Eclipse Neon (4.6)版本，自带Maven插件），需要更新Maven插件。&#xA;解决办法:https://www.cnblogs.com/wanggangblog/p/8901516.html&#xA;终于不报错了，于是试试能否启动成功，结果又出现，SpringBoot应用部署到Tomcat中无法启动问题：&#xA;解决办法:https://www.cnblogs.com/a8457013/p/7687764.html&#xA;这里我只修改了tomcat版本，后续依赖并没有添加，于是又出现了:&#xA;org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.context.ApplicationContextException: Unable to start ServletWebServerApplicationContext due to missing ServletWebServerFactory bean. at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:157) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE] at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) [spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) [spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) [spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) [spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE] at cn.tedu.springboot.DemoApplication.main(DemoApplication.java:12) [classes/:na] Caused by: org.springframework.context.ApplicationContextException: Unable to start ServletWebServerApplicationContext due to missing ServletWebServerFactory bean. at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getWebServerFactory(ServletWebServerApplicationContext.java:206) ~[spring-boot-2.</description>
    </item>
    <item>
      <title>Windows10配置深度学习环境（使用GPU）</title>
      <link>https://anwangtanmi.github.io/posts/19d60aabe5792bdaca8438d545fa3ad3/</link>
      <pubDate>Sat, 02 Feb 2019 13:02:59 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/19d60aabe5792bdaca8438d545fa3ad3/</guid>
      <description>之前在学校一直用的Ubuntu来配置深度学习环境，这次尝试了一下在windows下用Anaconda来配置。&#xA;笔记本型号是惠普暗影精灵3，显卡1050TI，没有提前安装python、CUDA、CUDNN等，所有的库全部由Anaconda来安装，笔者比较强迫症，不喜欢在电脑上装得乱七八糟，用Anaconda管理是真滴舒服。&#xA;一.Anaconda安装 这一步网上已经有很多教程，下载Anaconda最好去清华镜像源下载，官网下载的速度太慢，注意要下载对应版本。&#xA;如windows64位系统下载Anaconda3-2018.12-Windows-x86_64.exe&#xA;后面安装过程基本就是跟着安装界面一步一步next，路径尽量保证不要包含中文，有一点能说的就是在下面这个界面&#xA;如果没有预先安装python那么第二个必须打勾，第一个是询问是否将Anaconda的路径加到PATH环境变量中，这里虽然系统不推荐（not recommended），给出的理由是会影响之前安装的软件，这里笔者之前是打勾了，刚开始的几天没出问题，但是后面突然某一天电脑不能正常开机了，所以经过验证还是推荐不打勾，不加环境变量也可以运行程序。（这里勾选添加环境变量后出现的问题会在下一篇博客详细描述）&#xA;安装完成之后可以打开cmd，输入 conda info 或者 python有输出证明安装过程没有问题。&#xA;二.环境配置 打开Anaconda Navigator进入环境配置的界面&#xA;Anaconda方便之处就在这里，可以创建各种独立的工作区间，每一个区间都可以配置不同的环境，这里笔者使用的是Keras的GPU版，应该下载的是keras-gpu，直接勾选keras-gpu下载后，anaconda会自动的将所有需要的依赖加入下载选项，例如这里没有预先安装tensorflow的gpu版，但是安装keras-gpu时tensorflow-gpu会同样进入安装队列并且其他依赖需要降版本的anaconda会一并处理，着实方便！下载的时候如果没有更换为国内镜像源可能会出错，但是笔者根据网上的一些方法更换下载源之后反而变得不能下载，暂时没有找出原因，于是挂了VPN用的Anaconda默认下载源成功下载并安装。&#xA;三.运行程序 环境配置好后，笔者运行了一个CNN的手写数字识别代码来测试，用的是jupyter notebook（真香）。&#xA;测试结果如下：&#xA;可以看到一个epoch需要3秒，并且GPU占用率很高（风扇呼呼的转），记得最开始用CPU训练的时候大概是三十多秒一个epoch，CPU和GPU在训练时间上的差距真的挺大的。&#xA;到这里一个基本的使用GPU训练的深度学习环境就配置好了，希望对大家能有一点帮助。</description>
    </item>
    <item>
      <title>SpringBoot 集成 JavaMelody实现 性能监控</title>
      <link>https://anwangtanmi.github.io/posts/d1cc2dd06e2a7927b6fc306194f45c12/</link>
      <pubDate>Sun, 16 Dec 2018 19:53:17 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/d1cc2dd06e2a7927b6fc306194f45c12/</guid>
      <description>1、JavaMelody&#xA;JavaMelody能够在运行环境监测Java或Java EE应用程序服务器。并以图表的形式显示：Java内存和Java CPU使用情况，用户Session数量，JDBC连接数，和http请求、sql请求、jsp页面与业务接口方法（EJB3、spring、Guice）的执行数量，平均执行时间，错误百分比等。图表可以按天，周，月，年或自定义时间段查看。 2、Maven依赖&#xA;net.bull.javamelody&#x9;javamelody-core&#x9;1.73.1&#x9;com.lowagie&#x9;itext&#x9;2.1.7&#x9;3、配置JavaMelody&#xA;@Configuration public class MelodyConfig { /** * 配置javamelody监控 * spring boot 会按照order值的大小，从小到大的顺序来依次过滤 */ @Bean @Order(Integer.MAX_VALUE - 1) public FilterRegistrationBean monitoringFilter() { FilterRegistrationBean registration = new FilterRegistrationBean(); registration.setFilter(new MonitoringFilter()); registration.addUrlPatterns(&#34;/*&#34;); registration.setName(&#34;monitoring&#34;); return registration; } /** * 配置javamelody监听器sessionListener */ @Bean public ServletListenerRegistrationBean servletListenerRegistrationBean() { ServletListenerRegistrationBean slrBean = new ServletListenerRegistrationBean(); slrBean.setListener(new SessionListener()); return slrBean; } } 4、启动项目 访问路径为: http://ip:port/项目名/monitoring</description>
    </item>
    <item>
      <title>ThinkPad E470 win10-64bit显示问题和声音播放问题</title>
      <link>https://anwangtanmi.github.io/posts/96546bdb9947a6ee6001f25ce19ae713/</link>
      <pubDate>Thu, 08 Nov 2018 10:08:16 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/96546bdb9947a6ee6001f25ce19ae713/</guid>
      <description>本文针对win10 64位系统，话不多说，直接解决。&#xA;一、显示器自动变暗&#xA;问题描述：在打开黑色背景的软件时候屏幕自动变暗，并且按照网上各位大牛的方法均未能解决，心里着实不爽。如果按照网上各位大牛的方案还不奏效，那么，我这个解决方案可能是你在做系统前的最后一次垂死挣扎了。&#xA;解决方法：&#xA;1，打开设备管理器(我的电脑 –&amp;gt; 右键 –&amp;gt; 属性 –&amp;gt; 设备管理器)，找到显示适配器，先卸载驱动NVIDIA xxxx，后卸载驱动Intel(R) xxxx（必须是这个顺序卸载）。&#xA;2、下载新驱动 ：驱动下载点我&#xA;3、下载完成，一路next，I Agree，Finish即可。&#xA;4，重启。&#xA;二、无外放&#xA;下载一个热键驱动下载点我，安装，重启即可。</description>
    </item>
    <item>
      <title>SpringBoot使用WebSocket实现服务端推送—单机实现（1）</title>
      <link>https://anwangtanmi.github.io/posts/baf7ba7ecefbafa69a26cd8f704fcb25/</link>
      <pubDate>Sun, 14 Oct 2018 15:07:47 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/baf7ba7ecefbafa69a26cd8f704fcb25/</guid>
      <description>[![star](https://gitee.com/xxssyyyyssxx/websocket-springboot-starter/badge/star.svg?theme=dark)](https://gitee.com/xxssyyyyssxx/websocket-springboot-starter/stargazers)&#xA;最近开发中需要实现服务端的推送，经过一段时间的资料查询最终锁定使用websocket来实现。JavaEE本身就支持WebSocket。我们只需要开发一个EndPoint来处理连接、消息等即可。但是WebSocket的session管理是开发中的重中之重和难点，因为你需要知道推送给谁，就需要保存代表其连接的Session。&#xA;1.首先设计管理WebSocket的session的接口WebSocketManager。&#xA;/** * 管理websocket的session,可以使用Map * @author xiongshiyan at 2018/10/10 , contact me with email [email protected] or phone 15208384257 */ public interface WebSocketManager { /** * 在容器中的名字 */ String WEBSOCKET_MANAGER_NAME = &#34;webSocketManager&#34;; /** * 根据标识获取websocket session * @param identifier 标识 * @return WebSocket */ WebSocket get(String identifier); /** * 放入一个 websocket session * @param identifier 标识 * @param webSocket websocket */ void put(String identifier , WebSocket webSocket); /** * 删除 * @param identifier 标识 */ void remove(String identifier); /** * 获取当前机器上的保存的WebSocket * @return WebSocket Map */ Map localWebSocketMap(); /** * 统计所有在线人数 * @return 所有在线人数 */ default int size(){ return localWebSocketMap().</description>
    </item>
    <item>
      <title>登录注册样例（附带输入信息检验） springmvc</title>
      <link>https://anwangtanmi.github.io/posts/049db272771c59128de31345013b4e15/</link>
      <pubDate>Mon, 17 Sep 2018 10:03:09 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/049db272771c59128de31345013b4e15/</guid>
      <description>1 注册界面&#xA;&amp;lt;%@ page language=&#34;java&#34; contentType=&#34;text/html; charset=UTF-8&#34; pageEncoding=&#34;UTF-8&#34;%&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt; &amp;lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=edge&#34;&amp;gt; &amp;lt;title&amp;gt;买家注册title&amp;gt; &amp;lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34;&amp;gt; &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;${pageContext.request.contextPath}/conf1/css/font-awesome.min.css&#34;&amp;gt; &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;${pageContext.request.contextPath}/conf1/css/ionicons.min.css&#34;&amp;gt; &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;${pageContext.request.contextPath}/conf1/dist/css/adminlte.min.css&#34;&amp;gt; &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&#34; &amp;gt; head&amp;gt; &amp;lt;script type=&#34;text/javascript&#34;&amp;gt; function checkForm(){ if($.trim($(&#34;#name&#34;).val())==&#34;&#34;){ alert(&#34;请填写名字&#34;); $(&#34;#name&#34;).focus(); return false; } if($(&#34;#name&#34;).val().length&amp;gt;50){ alert(&#34;名字长度不得大于50个字符&#34;); $(&#34;#name&#34;).focus(); return false; } if($.trim($(&#34;#username&#34;).val())==&#34;&#34;){ alert(&#34;请填写用户名&#34;); $(&#34;#username&#34;).focus(); return false; } if($(&#34;#username&#34;).val().length&amp;gt;50){ alert(&#34;用户名长度不得大于50个字符&#34;); $(&#34;#username&#34;).focus(); return false; } if($.trim($(&#34;#password&#34;).val())==&#34;&#34;){ alert(&#34;请填写密码&#34;); $(&#34;#password&#34;).focus(); return false; } if($(&#34;</description>
    </item>
    <item>
      <title>ubuntu下安装svn</title>
      <link>https://anwangtanmi.github.io/posts/f5ea99ccf16a3d72e4c189477132fb6c/</link>
      <pubDate>Tue, 17 Apr 2018 01:29:33 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/f5ea99ccf16a3d72e4c189477132fb6c/</guid>
      <description>ubuntu下安装svn 1、下载安装&#xA;apt install subversion 2、创建目录和仓库&#xA;mkdir -p /home/.svn/repository svnadmin create /home/.svn/repository/ 3、进入配置文件(我这里用的是隐藏目录)&#xA;cd /home/.svn/repository/conf 4、打开svnserve.conf并配置&#xA;vim svnserve.conf 将 这三处改成 注意要顶格写 然后保存退出 5、修改passwd文件&#xA;vim passwd 添加用户名和密码，例如&#xA;zhaoyang = 123456 6、修改authz文件&#xA;vim authz 在[group]下面加上&#xA;admin=zhaoyang [/] @admin=rw 7、启动svn服务&#xA;svnserve -d -r /home/.svn 8、在客户端测试 地址就是 svn://ip/repository 注意默认端口是3690，要开放此端口&#xA;9、接下来配置开机自启 启动方法1：&#xA;先查一下svnserve的位置&#xA;which svnserve 例如返回&#xA;/usr/bin/svnserve 记住这个，后面脚本需要 开始写脚本&#xA;cd /etc/init.d vim svn.sh 打开后写入&#xA;#!/bin/bash /usr/bin/svnserve -d -r /home/.svn 保存退出后给文件添加可执行权限&#xA;chmod +x /etc/init.d/svn.sh 10、打开 /etc/rc.</description>
    </item>
    <item>
      <title>关于“暗网”的问题</title>
      <link>https://anwangtanmi.github.io/posts/e587911c181a4940ade0f99c078b7d3f/</link>
      <pubDate>Tue, 31 Oct 2017 14:06:33 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/e587911c181a4940ade0f99c078b7d3f/</guid>
      <description>“暗网” 什么是“暗网”？ 有图有真相，上图：&#xA;关于这个名词，大家还是百度下吧。这里简单地摘录下描述性的内容：&#xA;关于“暗网”，最出名的一句话应该是这句：暗网也称深网，也称隐形网，hideweb，deepweb。&#xA;深网的意思就是说冰山上露出的那一角使我们现在看到的 “明网”，据说整个数据量的 96% 在下面。&#xA;想了解的，这里推荐一个经典大片里可能引用的内容，&#xA;那就是“暗网”纪录片：BBC地平线系列纪录片《深入暗网》。&#xA;onion的网络是暗网中的一小部分，但里面的内容很多，这里不再描述了。&#xA;好奇害死猫，不要去挖冰山下面的那些大脚脚的内容。&#xA;Tor 浏览器可以突破GFW，很好滴保护好自己的隐私。&#xA;感兴趣的可以去利用这个工具，访问youtube学习英文，但不要让youtube的系统觉得你是一个机器人ROBOT就行。&#xA;ZeroNet 也算是深网的一种了。&#xA;“比特币”的流行 说起暗网，不得不提起虚拟货币，那就是比特币。&#xA;为了保护交易双方的个人隐私，大家在暗网中不会傻到使用自己的银行账号吧！&#xA;所以中间货币就成了双方的折中的比特币了。&#xA;近日，全球爆发加密勒索病毒WannaCry攻击，中国很多用户也收到了黑客发来的勒索信（2.25比特币等于500美元）。&#xA;很多人注意到，在勒索信中黑客索要的货币并非实体货币，而是之前引发投资热的“比特币”。&#xA;伟大的墙GFW 从某一层面上说，GFW有他自己的好处，至少能让我们生活在一个过滤过的互联网世界里。看到的都是相对美好的内容，尽管有些漏网之鱼。&#xA;但是出于对自由的追寻的人，你可以借个梯子翻过去，看看外面的世界，上天，入地，成佛，成魔就看你自己了。&#xA;明与暗的较量 未来这样的世界依然存在，只是你不曾了解而已。&#xA;网络的力量 我们身处在明与暗的交互中，就看你是否随波逐流了。&#xA;最后以谷歌创始人佩奇谈深网以及网络问题时所说的一句话来总结下吧：“不能因为洗澡水脏，就把水跟孩子一起倒掉。”</description>
    </item>
    <item>
      <title>阿里云 云盾 安骑士 监控ECS离线 安全组规则 ip设置</title>
      <link>https://anwangtanmi.github.io/posts/7f8f32523eb5d74413a1df2b3438e30b/</link>
      <pubDate>Fri, 25 Aug 2017 10:23:19 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/7f8f32523eb5d74413a1df2b3438e30b/</guid>
      <description>因为公司的服务器开启了阿里云的，云盾 安骑士，当监控的ecs服务器上有漏洞时就会进行短信提示。&#xA;由于这台ecs的服务器是不允许访问外网的（即阿里云的安全组规则，禁止了所有的出方向），造成了监控数据无法上报到阿里云，然后阿里云那就一直有短信提示，ecs服务器上有漏洞，需要修复，（漏洞是在第一次提示时就修复了，当时自动修复还一直没显示成功，后面发现要重启服务器），至此找找解决方案，什么云博士，客服电话，工单什么的就算了，慢的很，网上也看到没现成的帖子。&#xA;遂查看阿里云的文档：云监控插件安装指南&#xA;发现如下内容&#xA;云监控判断停止的标准是15分钟没有心跳，停止状态代表两种可能：&#xA;云监控Agent进程停止。 云监控Agent无法与服务器通讯。 可以通过登录机器运行ps aux|grep cloudmonitor来判断进程是否还在，windows用户可以通过查看cloudmonitor服务的状态来判断。如果进程还在,可以查看/usr/local/cloudmonitor/logs/cloudmonitor.log来确定具体原因。&#xA;windows系统中的默认位置：C:\Program Files (x86)\Alibaba\cloudmonitor\logs&#xA;进入文件 cloudmonitor.log 查看到有报错为：&#xA;676679777 ERROR 2017-08-25 09:53:07.11 [onnectionServiceImpl] 联网错误:cms-cloudmonitor.aliyun.com&#xA;java.net.UnknownHostException: cms-cloudmonitor.aliyun.com&#xA;at java.net.AbstractPlainSocketImpl.connect(Unknown Source)&#xA;at java.net.PlainSocketImpl.connect(Unknown Source)&#xA;at java.net.SocksSocketImpl.connect(Unknown Source)&#xA;at java.net.Socket.connect(Unknown Source)&#xA;at sun.security.ssl.SSLSocketImpl.connect(Unknown Source)&#xA;at sun.net.NetworkClient.doConnect(Unknown Source)&#xA;at sun.net.www.http.HttpClient.openServer(Unknown Source)&#xA;at sun.net.www.http.HttpClient.openServer(Unknown Source)&#xA;at sun.net.www.protocol.https.HttpsClient.(Unknown Source)&#xA;at sun.net.www.protocol.https.HttpsClient.New(Unknown Source)&#xA;at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(Unknown Source)&#xA;at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(Unknown Source)&#xA;at sun.net.www.protocol.http.HttpURLConnection.plainConnect(Unknown Source)&#xA;at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(Unknown Source)&#xA;at sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(Unknown Source)</description>
    </item>
    <item>
      <title>maven的动态web项目从搭建到运行完整示例（dark亲测可用）</title>
      <link>https://anwangtanmi.github.io/posts/cca7f08345baea5a61a1634fe3fced77/</link>
      <pubDate>Tue, 01 Aug 2017 16:45:50 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/cca7f08345baea5a61a1634fe3fced77/</guid>
      <description>原文地址点击此处&#xA;当前eclipse版本为 neon3 、jdk为1.8.25 、tomcat为8.5&#xA;需求表均同spring案例&#xA;此处只是使用maven&#xA;注意,以下所有需要建立在你的eclipse等已经集成配置好了maven了,说白了就是新建项目的时候已经可以找到maven了&#xA;没有的话需要安装maven&#xA;1.新建maven项目,由于当前版本的eclipse自带maven插件，如下图所示。如果没有请自行百度安装maven插件&#xA;2,进入maven项目之后,点击next&#xA;选择webapp之后 next&#xA;输入两个id package可以不写,是它默认帮你新建一个包,不写没关系&#xA;会生成一个这样目录的项目&#xA;2,配置maven&#xA;首先新建几个文件夹&#xA;2.1 添加Source文件夹&#xA;接下来需要添加&#xA;src/main/java&#xA;src/test/java src/test/resources三个文件夹&#xA;右键项目根目录点击New -&amp;gt; Source Folder，&#xA;建出这三个文件夹。注意不是建普通的Folder，而是Source Folder。&#xA;项目或者文件加上右键 new sourceFolder,正常情况下是没有问题的&#xA;如果出现了下面的这情况,其实是真的存在的只是我们看不到&#xA;项目右键属性&#xA;修改jdk为你使用的jdk，比如我自己的就是1.8.025&#xA;设置完毕之后自然会发现src/main/java这个source folder出现啦。&#xA;然后看一下，src/main/sources、src/test/java、src/test/resources这三个哪个没有就建哪个，效果如下&#xA;2.2 更改class路径&#xA;右键项目，Java Build Path -&amp;gt; Source&#xA;下面应该有4个文件夹。src/main/java，src/main/resources，src/test/java ，src/test/resources。&#xA;双击每个文件夹的Output folder，选择路径。&#xA;src/main/java，src/main/resources，选择target/classes;&#xA;src/test/java ，src/test/resources, 选择target/test-classes;&#xA;选上Allow output folders for source folders.（如果没有选上的话）&#xA;点击左侧属性 project Facets，想要切换成3.1发现报错&#xA;这是因为当前版本的eclipse在新建项目的时候，默认使用maven-artchetype-webapp&#xA;这个的catalog比较老，对应的servlet还是2.3的&#xA;Archetype Created Web Application 打开当前项目对应的workspace，找到当前工程文件夹下的.</description>
    </item>
    <item>
      <title>svn: Directory ‘xx’ is out of date</title>
      <link>https://anwangtanmi.github.io/posts/706eaa940c5009e553a61084da27c220/</link>
      <pubDate>Wed, 14 Jun 2017 14:00:55 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/706eaa940c5009e553a61084da27c220/</guid>
      <description>svn: Directory ‘xx’ is out of date&#xA;使用Svn提交时候遇到如下错误：&#xA;Deleting E:\EcProjectAPI\sshapp-server-rypj-api\src\main\webapp\webpage\modules\res&#xA;Item is out of date&#xA;svn: Commit failed (details follow):&#xA;svn: Item ‘/webapp\webpage\modules\res’ is out of date&#xA;遇到这个错误原因是本地的资源文件版本不是服务器上面最新的版本，因此修改本地文件再提交时候，就会报Out of date错误。&#xA;解决办法，修改文件时候一定要首先保证和服务器一致，再做修改；而此时 需要先将本地文件还原（记着备份哦），再更新和服务器一致后再做修改。&#xA;解决方法：1、来到要删除目录的上级目录，执行更新操作。然后在提交。</description>
    </item>
    <item>
      <title>【NSA黑客工具包】Windows 0day验证实验</title>
      <link>https://anwangtanmi.github.io/posts/8730e4e5a49bf9991e78b5c3dac7c2a6/</link>
      <pubDate>Thu, 04 May 2017 15:41:26 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/8730e4e5a49bf9991e78b5c3dac7c2a6/</guid>
      <description> 黑客组织发布出一份震惊世界的机密文档，其中包含了多个Windows 远程漏洞利用工具，此工具集覆盖大量的Windows服务 器，可以被任何人进行下载利用，攻击者可以利用工具对Windows目标主机进行溢出提权，危害极大。&#xA;目前已知受影响的 Windows 版本包括但不限于：Windows NT，Windows 2000（没错，古董也支持）、Windows XP、Windows 2003、Windows Vista、Windows 7、Windows 8， Windows 2008、Windows 2008 R2、Windows Server 2012 SP0，基本全球70%的Windows服务器可能都暴露在危险之中，这次事件影响力堪称网络大地震！&#xA;面对这种指哪儿打哪儿的神级漏洞，锦行科技CTO.Jannock、长亭科技.Monster、腾讯玄武实验室.TK、腾讯湛泸实验室.yuange等国内相关安全专家也给出了一些想法和解决方案。微软MSRC也发布了一则风险评估公告，报告中指出微软MSRC分析了由Shadow Brokers公开提供 的大量漏洞，大多数漏洞都已经被修补。剩余的漏洞，也被验证在Windows7、Windows近期版本、Exchange2010以及Exchange较新版本中没有得到复现，不过微软MSRC强烈建议仍在使用这些产品先前版本的用户升级到更新版本。&#xA;想要了解相关防御方案，来i春秋学院吧！i春秋全网首发，为您复现真实漏洞场景，将被暴 露出的工具包搭建到虚拟环境中，用于大家学习，了解修补方案，达到安全防护的目的。&#xA;课程目标 本次实验将复现真实漏洞场景，让同学们分别从&#xA;漏洞产生原理、&#xA;漏洞攻击手法以及&#xA;如何修复漏洞这三个方面进行学习。 </description>
    </item>
    <item>
      <title>go语言入门-搞定cmd</title>
      <link>https://anwangtanmi.github.io/posts/b6ad4b0d6b73c8dfbddf095d5cebd0a8/</link>
      <pubDate>Sun, 19 Mar 2017 23:05:28 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/b6ad4b0d6b73c8dfbddf095d5cebd0a8/</guid>
      <description>go语言入门-搞定cmd&#xA;package main import ( &#34;bufio&#34; &#34;fmt&#34; &#34;io&#34; &#34;os/exec&#34; &#34;regexp&#34; &#34;strconv&#34; &#34;strings&#34; ) func main() { command := &#34;ping&#34; params := []string{&#34;-a&#34;, &#34;127.0.0.1&#34;} //执行cmd命令: ls -l execCommand(command, params) // command := &#34;ipconfig&#34; // params := []string{&#34;/all&#34;} // //执行cmd命令: ls -l // ip := getip(command, params) // fmt.Println(ip) // ip2 := IncIP(ip, 1) // ip3 := IncIP(ip, 2) // ip4 := IncIP(ip, 3) // ip5 := IncIP(ip, 4) // fmt.Println(ip2) // fmt.</description>
    </item>
    <item>
      <title>Firefox浏览器修改背景颜色为豆沙绿</title>
      <link>https://anwangtanmi.github.io/posts/71f25ea56cccaddcfcf1c4904cfc96c9/</link>
      <pubDate>Fri, 21 Oct 2016 18:29:28 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/71f25ea56cccaddcfcf1c4904cfc96c9/</guid>
      <description>问题：&#xA;Firefox自带修改颜色的功能（选项-内容-颜色-背景），但效果并不太理想，一是修改后感觉网站们的排版都怪怪的，二是提供的默认的颜色都并不太适合作为背景色。&#xA;解决方案：&#xA;Firefox的优势就在于众多的插件，这个问题也通过插件来解决。&#xA;安装Stylish插件。在Stylish官网上有各种针对一些特定网站（比如Facebook、YouTube等）的主题，对于改背景色这个问题用不上，需要手工编写新样式。&#xA;以下是新样式的内容：&#xA;body {background-color:#C7EDCC !important;} table {background-color:#C7EDCC !important;} td {background-color:#C7EDCC !important;} #container {background-color:#C7EDCC !important;} #wrapper {background-color:#C7EDCC !important;} #mainwrapper {background-color:#C7EDCC !important;} #main-wrapper {background-color:#C7EDCC !important;} #content {background-color:#C7EDCC !important;} #maincontent {background-color:#C7EDCC !important;} #main-content {background-color:#C7EDCC !important;} #main {background-color:#C7EDCC !important;} .container {background-color:#C7EDCC !important;} .wrapper {background-color:#C7EDCC !important;} .mainwrapper {background-color:#C7EDCC !important;} .main-wrapper {background-color:#C7EDCC !important;} .content {background-color:#C7EDCC !important;} .maincontent {background-color:#C7EDCC !important;} .main-content {background-color:#C7EDCC !important;} .main {background-color:#C7EDCC !important;} .gb-page-inner{background-color:#C7EDCC !important;} .panel-body {background-color:#C7EDCC !important;} 最上边的body、table、td等的设置是通用的，下边的则是需要根据不同网站命名的不同而不断添加的，列表需要不断维护。</description>
    </item>
    <item>
      <title>宏碁VN7-592G声卡问题解决方案</title>
      <link>https://anwangtanmi.github.io/posts/44cb52c925f37d538b809bff1de86527/</link>
      <pubDate>Sun, 14 Aug 2016 16:40:20 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/44cb52c925f37d538b809bff1de86527/</guid>
      <description>在使用过程中，偶尔遇到声音突然没有了的情况，右下角的喇叭图标有一个红叉。查看设备管理器，发现“英特尔(R)智音技术音频控制器”带有感叹号，属性中说代码10.&#xA;尝试过很多方法都无效，例如安装官网声卡Realtek驱动、用各类坑爹驱动软件。&#xA;在各类摸索中，终于发现了一个不用重装系统的方法。&#xA;步骤如下：&#xA;1.打开设备管理器；&#xA;2.点击上方操作栏：“查看”-“显示隐藏的设备”；&#xA;3.找到下方设备中的：“声音、视频和游戏控制器”-“Realtek High Definition Audio(SST)”；&#xA;4.右击上述设备，卸载；&#xA;5.在官网下载声卡驱动，并安装；&#xA;注：如果我的这个方法无效，那只好重装系统。祝你好运！</description>
    </item>
    <item>
      <title>【机器视觉】光源照明方式简介</title>
      <link>https://anwangtanmi.github.io/posts/7bcb31916b09cb646f2de2376bfca738/</link>
      <pubDate>Sun, 12 Jun 2016 13:41:52 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/7bcb31916b09cb646f2de2376bfca738/</guid>
      <description>原文地址：机器视觉光源照明方式简介&#xA;机器视觉光源照明方式简介&#xA;光源是影响机器视觉系统输入的重要因素，其直接影响输入数据的质量和至少30%的应用效果。由于没有通用的机器视觉照明设备，所以针对每个特定的应用实例，要选择相应的照明装置，以达到最佳效果。下面介绍几种常见的照明方式。&#xA;一般目的的照明（直接照明）：光直接射向物体，得到清楚的影像。当需要得到高对比度物体图像的时候，这种类型的光很有效。但是当用它照在光亮或反射的材料上时，会引起像镜面的反光。通用照明一般采用环状或点状照明。环灯是一种常用的通用照明方式，其很容易安装在镜头上，可给漫反射表面提供足够的照明。&#xA;暗场（Dark Field）照明：暗场照明是相对于物体表面提供低角度照明。使用相机拍摄镜子使其在其视野内，如果在视野内能看见光源就认为使亮场照明，相反的在视野中看不到光源就是暗场照明。因此光源是亮场照明还是暗场照明与光源的位置有关。典型的，暗场照明应用于对表面部分有突起的部分的照明或表面纹理变化的照明。&#xA;背光照明：从物体背面射过来均匀视场的光。通过相机可以看到物面的侧面轮廓。背光照明常用于测量物休的尺寸和定物体的方向。背光照明产生了很强的对比度。应用背光技术时候，物体表面特征可能会丢失。例如，可以应用背光技术测量硬币的直径，但是却无法判断硬币的正反面。&#xA;同轴照明：同轴光的形成即通过垂直墙壁出来的变化发散光，射到一个使光向下的分光镜上，相机从上面通过分光镜看物体。这种类型的光源对检测高反射的物体特别有帮助，还适合受周围环境产生阴影的影响，检测面积不明显的物体。&#xA;漫射照明：连续漫反射照明应用于物体表面的反射性或者表面有复杂的角度。连续漫反射照明应用半球形的均匀照明，以减小影子及镜面反射。这种照明方式对于完全组装的电路板照明非常有用。这种光源可以达到170立体角范围的均匀照明。&#xA;除了以上介绍的几种常用照明技术，还有些特殊场合所使用的照明技术，比如在线阵相机中需要亮度集中的条形光照明；比如在精密尺寸测量中与远心镜头配合使用的平行光照明技术；比如在高速在线测量中减小被测物模糊的频闪光照明技术；又比如可以主动测量相机到光源的距离结构光照明技术和减少杂光干扰的偏振照明技术等。&#xA;此外，很多复杂的被测环境需要两种或两种以上照明技术共同配合完成。因而丰富的照明技术可以解决视觉系统中图像获取的很多问题，光源照明技术的选择可能对一个视觉系统的成功与否至关重要。</description>
    </item>
    <item>
      <title>java实现为图片添加水印</title>
      <link>https://anwangtanmi.github.io/posts/cadcf5b3bca1995f108bcf685d306ea3/</link>
      <pubDate>Thu, 25 Feb 2016 11:47:49 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/cadcf5b3bca1995f108bcf685d306ea3/</guid>
      <description>这个水印功能是看的慕课网的视频自己跟着学的，视频连接如下：http://www.imooc.com/learn/482&#xA;图片文件的上传界面、上传功能以及页面展示，这里就不再写了，可以去struts2环境下实现文件上传看，也可以去慕课网看视频。这里就记录下生成水印的代码。&#xA;先说说实现水印功能的思路：&#xA;1、创建图片缓存对象&#xA;2、创建绘图工具对象(有点类似于画布)&#xA;3、使用绘图工具对象将原图绘制到缓存图像对象中&#xA;4、使用绘图工具对象将水印（文字/图片）绘制到缓存图片对象中&#xA;5、创建图像编码工具类&#xA;6、使用图像编码工具类输出缓存图像到目标文件中&#xA;以下为水印功能的具体实现：&#xA;1、用来集中处理业务逻辑的Action（这里用的例子是一次性为多张图片添加水印）：&#xA;public class WaterMarkAction extends ActionSupport{ private File[] image; private String[] imageFileName; private String uploadPath; private List picInfo = new ArrayList(); public String waterMark() throws Exception{ String realUploadPath = ServletActionContext.getServletContext().getRealPath(uploadPath); if(image!=null &amp;amp;&amp;amp; image.length&amp;gt;0){ PicInfo pic=null; UploadService uploadService = new UploadService();//该service用来上传文件 //MarkService markService = new TextMarkService();//文字水印 //MarkService markService = new ImageMarkService();//图片水印 //MarkService markService = new MoreTextMarkService();//多文字水印 MarkService markService = new MoreImageMarkService();//多图片水印 for(int i=0;i 2、定义实现水印功能的接口：添加的水印包括四种情况：单一文字水印、单一图片水印、多文字水印、多图片水印。所以这里将实现水印的功能定义成了一个抽象类（除了有需要子类实现的方法外还有子类需要用到的公用方法），抽象类代码如下：</description>
    </item>
    <item>
      <title>maven中的junit测试</title>
      <link>https://anwangtanmi.github.io/posts/30f83c75a29ca1c44f8da4b00747e76e/</link>
      <pubDate>Mon, 02 Nov 2015 10:58:37 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/30f83c75a29ca1c44f8da4b00747e76e/</guid>
      <description>maven倡导约定优于配置，而maven的约定目录结构为：&#xA;src/main/java 下存放java类&#xA;src/main/webapp 下存放页面文件(需要手动创建)&#xA;src/main/resources 下存放资源文件&#xA;src/test/java 下存放单元测试代码&#xA;src/test/resources 下存放测试资源文件 maven运行的生命周期为：&#xA;复制src/main/resources资源文件到输出目录&#xA;编译src/main/java下的源代码&#xA;复制src/test/resources下的测试用资源文件到测试输出目录&#xA;编译src/test/java下的测试用例&#xA;运行测试用例&#xA;打包生成&#xA;默认情况下，maven集成了maven-surefire-plugin插件，该插件会去查找src/test/java下所有包含Test的类作为测试类，测试类会去src/test/resources下查找测试资源。我们只需在测试方法上使用@Test注解，那么测试就顺理成章了。但是spring junit测试时，经常出现注解未扫描到注解的情况，例如：&#xA;package com.student.system.service.user; import javax.annotation.Resource; import org.junit.Test; import com.student.system.entity.user.TUser; public class TestUserService { @Resource private UserService userService; @Test public void findUserById(){ TUser user =userService.findUserById(&#34;123&#34;); System.out.println(user.toString()); } } 会出现空指针异常，具体原因我也未找到，如果有人知道请留言告诉我。我将测试资源是放在了src/test/resources下的。&#xA;我们可以使用spring-junit包来提供对配置文件的支持来弥补上面的缺陷，这样就不需要在src/test/resources下再存放资源文件了。使用这种方法需要如下步骤： 1.使用@RunWith注解来实现SpringJUnit4ClassRunner.class来替换junit默认的执行类Suite。&#xA;@RunWith(SpringJUnit4ClassRunner.class)&#xA;2.指定Spring配置文件的位置&#xA;@ContextConfiguration(locations={“classpath:applicationContext.xml”,“classpath:applicationContext-security.xml”，”file:src/main/webapp/WEB-INF/servlet.xml”})&#xA;这里提供了2中路径的写法，一种是classpath，这种方式是去src/main/resources下查找资源文件。另一种file:是从项目根目录下查找指定的路径文件。&#xA;例如：&#xA;package com.student.system.service.user; import javax.annotation.Resource; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import com.student.system.entity.user.TUser; @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations={&#34;</description>
    </item>
    <item>
      <title>GO语言教程（一）Windows下Go的安装, 以及HelloWorld</title>
      <link>https://anwangtanmi.github.io/posts/2ae92bebcbb52d66947cc0277bdfe172/</link>
      <pubDate>Mon, 26 Oct 2015 13:39:05 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/2ae92bebcbb52d66947cc0277bdfe172/</guid>
      <description>上一篇文章中，已经叙述了如何在linux下安装配置GO，这篇来说一下windows下Go的安装配置。&#xA;首先去官网下载go的安装包，这里用的是：go1.5.1.windows-amd64.msi&#xA;■ 1，安装&#xA;安装其实没有什么好说的，我们一路next，采用默认安装，安装在C:\Go下。&#xA;这里要说明的是，其实在安装的时候，会自动在系统环境变量里新建一个 GOROOT 环境变量，如下：&#xA;还会自动把 PATH 环境变量设置好，如下：&#xA;■ 2，建立Go的工作空间（workspace，也就是GOPATH环境变量指向的目录）&#xA;GO代码必须在工作空间内。工作空间是一个目录，其中包含三个子目录：&#xA;src —- 里面每一个子目录，就是一个包。包内是Go的源码文件&#xA;pkg —- 编译后生成的，包的目标文件&#xA;bin —- 生成的可执行文件。&#xA;这里，我们在D:\ 目录下, 建立一个名为gopath(可以不是gopath, 任意名字都可以)的文件夹，&#xA;然后再建立三个子文件夹(子文件夹名必须为src、pkg、bin)。如下图：&#xA;■ 3，添加GOPATH环境变量&#xA;安装包不会帮我们添加的，就是这个GOPATH环境变量了。&#xA;添加环境变量很简单，尤其对搞java的同学来讲。 但是为了照顾一下纯新手同学，我们还是详细的说一下：&#xA;以win10为例，点击开始按钮旁边的【搜索】按钮，输入【环境】，即可找到环境变量的面板：&#xA;点击【编辑系统环境变量】，然后在弹出的页面中，选择【环境变量】，之后选中“系统变量”中的任意一个，点击【新建】。&#xA;输入&amp;lt;变量名&amp;gt;：GOPATH&#xA;输入&amp;lt;变量值&amp;gt;：D:\gopath&#xA;之后点击【确定】。&#xA;为了确保环境变量生效，可以重启一下电脑。&#xA;至此，GO语言环境已经安装配置完毕。下面开始 HelloWorld&#xA;■ 4，新建项目（应用包）。&#xA;一般来说，建议包名和目录名保持一致，所以，在src文件夹下，按照你想要创建的包名，组织文件夹路径。&#xA;这里，我们在D:\gopath\src下面，建立hello文件夹。路径如下图：&#xA;■ 5，新建go代码&#xA;D:\gopath\src\hello下面，建立helloworld.go文件，并编辑，加入如下代码：&#xA;package main&#xA;import ( “fmt”&#xA;“time”&#xA;) func main() {&#xA;fmt.Println(“Hello world!”)&#xA;duration := time.Duration(10)*time.Second&#xA;time.Sleep(duration)&#xA;}&#xA;■ 6，编译生成go程序&#xA;打开命令行，（微软键+R键, 输入cmd）</description>
    </item>
    <item>
      <title>解决 安装驱动程序后设备管理器中显示黄色问号</title>
      <link>https://anwangtanmi.github.io/posts/cd9bf88f5af6fdf3d370073c342c2d3b/</link>
      <pubDate>Mon, 20 Oct 2014 15:05:35 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/cd9bf88f5af6fdf3d370073c342c2d3b/</guid>
      <description>其实很简单，在inf中有中设置图表索引&#xA;显示黄色问号肯定说明 你是这样填写的&#xA;HKR,,Icon,,”-18″&#xA;PCI设备要改成 -5&#xA;数值如下&#xA;Computer 0 Display 2 Mouse 5 Keyboard 6 FDC 9 HDC 9 Ports 10 Net 15 System 0 Sound 8 Printer 14 Monitor 2 Network Transport 3 Network Client 16 Network Service 17&#xA;如果还有不清楚 可以看你系统的驱动inf里面的值是什么！</description>
    </item>
    <item>
      <title>输入法汉字拼音码表</title>
      <link>https://anwangtanmi.github.io/posts/a364038ac58337f8a8f78b255f17e366/</link>
      <pubDate>Mon, 18 Jun 2012 16:56:21 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/a364038ac58337f8a8f78b255f17e366/</guid>
      <description>const struct struct_PY_HZ_DB PY_HZ_DB[23] =&#xA;{&#xA;{‘a’,&#xA;5 ,&#xA;{ {“a”, “啊阿呵吖嗄腌锕”}//旁勹&#xA;, {“ai”, “爱矮挨哎碍癌艾唉哀蔼隘埃皑呆嗌嫒瑷暧捱砹嗳锿霭乃剀呃噫奇阂崖”}&#xA;, {“an”, “按安暗岸俺案鞍氨胺厂广庵揞犴铵桉谙鹌埯黯干盒”}//钳顸&#xA;, {“ang”, “昂肮盎仰”}&#xA;, {“ao”, “袄凹傲奥熬懊敖翱澳嚣拗媪廒骜嗷坳遨聱螯獒鏊鳌鏖岙噢”}//棍浇&#xA;}&#xA;}, {‘b’,&#xA;17,&#xA;{ {“b”, “不把八吧爸拔罢跋巴芭扒坝霸叭靶笆疤耙捌粑茇岜鲅钯魃菝灞伯捭杷湃萆”}&#xA;,&#xA;{“ba”, “把八吧爸拔罢跋巴芭扒坝霸叭靶笆疤耙捌粑茇岜鲅钯魃菝灞杷伯”}//捭湃萆&#xA;, {“bai”, “百白摆败柏拜佰伯稗捭呗薭掰”} //扒排派薜鞴&#xA;, {“ban”, “半办班般拌搬版斑板伴扳扮瓣颁绊癍坂钣舨阪瘢”}//分彬豳辨辩&#xA;, {“bang”, “帮棒绑磅镑邦榜蚌傍梆膀谤浜蒡彭”}//旁纺螃&#xA;, {“bao”, “包抱报饱保暴薄宝爆剥豹刨雹褒堡苞胞鲍炮瀑龅孢煲褓鸨趵曝簿葆勹”}//呆袍裒宀&#xA;, {“bei”, “被北倍杯背悲备碑卑贝辈钡焙狈惫臂褙悖蓓鹎鐾呗邶鞴孛陂碚”}//俾埤怫波菩萆葡蜚跋&#xA;, {“ben”, “本奔苯笨夯锛贲畚坌体”}&#xA;, {“beng”, “蹦绷甭崩迸蚌泵甏嘣堋”}//俸傍唪平抨旁榜&#xA;, {“bi”, “比笔闭鼻碧必避逼毕臂彼鄙壁蓖币弊辟蔽毙庇敝陛毖痹秘泌秕薜荸芘萆匕裨畀俾嬖狴筚箅篦舭荜襞庳铋跸吡愎贲滗濞璧哔髀弼妣婢纰佛拂”}&#xA;//馥脾虑被费跛鐾陂陴服枇檗殍波瞥仳卑埤复媲幅庀捭&#xA;, {“bian”, “边变便遍编辩扁贬鞭卞辨辫忭砭匾汴碥蝙褊鳊笾苄窆弁缏煸”}//封拚稹髟&#xA;, {“biao”, “表标彪膘杓婊飑飙鳔瘭飚镳裱骠镖髟灬”}//剽嫖漂苞鏖&#xA;, {“bie”, “别憋鳖瘪蹩”}//扒拔捌撇秘蔽</description>
    </item>
    <item>
      <title>手机阅读类软件的36种配色方案</title>
      <link>https://anwangtanmi.github.io/posts/ff28a93f49bc9efd4c6d2368eb737e13/</link>
      <pubDate>Fri, 13 Apr 2012 09:09:15 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/ff28a93f49bc9efd4c6d2368eb737e13/</guid>
      <description>我最近在写一个 Android 程序，主要以显示特定文本内容为主，所以颜色的搭配、界面的舒适就比较重要。于是，我根据网络上流传的一些配色讨论和常见手机软件的配色效果，整理了一些比较成功的配色图样，主要可以分为暗、中、亮三大类，适用于手机显示的夜间模式、普通模式与强光模式。 我希望各位朋友能够在评论中指出自己认为最适当的10种方案，以便让我的软件中借鉴采用。由于对色彩学不熟悉，前景背景的搭配也不一定适当，我更希望大家能提出一些更好的配色方案。&#xA;这是方案 1&#xA;多套配色方案，看书舒适又润眼&#xA;背景：#262626&#xA;前景：#ccffff 这是方案 2&#xA;多套配色方案，看书舒适又润眼&#xA;背景：#100a0b&#xA;前景：#726866 这是方案 3&#xA;多套配色方案，看书舒适又润眼&#xA;背景：#2f2f2f&#xA;前景：#ffffcc 这是方案 4&#xA;多套配色方案，看书舒适又润眼&#xA;背景：#330000&#xA;前景：#ffffff 这是方案 5&#xA;多套配色方案，看书舒适又润眼&#xA;背景：#330000&#xA;前景：#0ac200 这是方案 6&#xA;多套配色方案，看书舒适又润眼&#xA;背景：#303000&#xA;前景：#cccaa1 这是方案 7&#xA;多套配色方案，看书舒适又润眼&#xA;背景：#4b2c23&#xA;前景：#ccffff 这是方案 8&#xA;多套配色方案，看书舒适又润眼&#xA;背景：#4a4a4a&#xA;前景：#ccffff 这是方案 9&#xA;多套配色方案，看书舒适又润眼&#xA;背景：#360e38&#xA;前景：#ccffff 这是方案 10&#xA;多套配色方案，看书舒适又润眼&#xA;背景：#330033&#xA;前景：#ffffff 这是方案 11 典雅&#xA;多套配色方案，看书舒适又润眼&#xA;背景：#522c54&#xA;前景：#ececa0 这是方案 12 典雅&#xA;多套配色方案，看书舒适又润眼&#xA;背景：#224800&#xA;前景：#ccffff 这是方案 13 时尚</description>
    </item>
    <item>
      <title>3D版四国军棋 – 概要设计</title>
      <link>https://anwangtanmi.github.io/posts/607b637aad12a07896fd0f4437564ccb/</link>
      <pubDate>Fri, 19 Nov 2010 11:02:00 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/607b637aad12a07896fd0f4437564ccb/</guid>
      <description>军棋是群众喜爱的一种棋类。因为它规则简单但又不乏趣味性。传统军棋由两人对战，有翻棋和暗棋两种下法。二十世纪后，社会分工已经深入人心。勤劳智慧的老百姓在伟大的二人对战军棋的基础上研制出了四国团战军棋。四国军棋大大丰富的军棋的战术技巧和趣味性，是军棋发展史上的一个重要里程碑，也是中华民族的智慧结晶。&#xA;棋盘 规则 （还在调试中。。。。。）&#xA;因为网络支持在后期才能完成，所以前期只能玩翻棋。&#xA;翻棋规则：&#xA;对家结盟，任何一家坚持到最后就是胜利&#xA;连横合纵Both OK；或者不结盟，或者中立，或者易织，或者。。。&#xA;Tips：&#xA;因为棋盘是3D的，所以可以在两个表面下，要不每个国家都有一次“翻盘”机会？&#xA;编程语言 曾经好一段时间我们都纠结于WPF与SilverLight。经过大量调研之后，我们作了一个艰难的决定：&#xA;使用SilverLight，卸载WPF。因为，&#xA;一、SilverLight作为一种网络媒介，能让我们艰辛研究的3D版四国军棋走得更远，传得更广，给分更多&#xA;二、SilverLight程序比WPF程序小&#xA;三、邹老师更看好SilverLight&#xA;四、小林老师手把手教我们SilverLight&#xA;可惜的是，&#xA;我们希望四国军棋运行在本地，并能在局域网组队团战。WPF貌似能提供更多支持。我们查阅了相关文档，SilverLight支持Socket。这是说明SilverLight有网络通信的能力。。。但给力太少了&#xA;在3D编程方面，貌似SilverLight也很复杂啊~大牛们给把牛刀？&#xA;开发环境 正版VS2010（经常重启，为什么？）+ SilverLight插件&#xA;Blend只是玩玩而已&#xA;计划 今天：棋盘棋子&#xA;明天：翻棋、3D&#xA;后天：联网、暗棋&#xA;之后：发布、测试、改进&#xA;欢迎拍砖~&#xA;MicroTeam Hui</description>
    </item>
    <item>
      <title>“电脑族”保健 六项注意</title>
      <link>https://anwangtanmi.github.io/posts/6d6046ff7272c49b2a631eda7d048eac/</link>
      <pubDate>Wed, 08 Oct 2008 09:48:54 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/6d6046ff7272c49b2a631eda7d048eac/</guid>
      <description>目前，电脑对人体生理和心理方面的负面影响已日益受到人们的重视。为此科学使用电脑，减少电脑和网络的危害是十分必要的。 一是要增强自我保健意识 工作间隙注意适当休息，一般来说，电脑操作人员在连续工作1小时后应该休息10分钟左右。并且最好到操作室之外活动活动手脚与躯干。平时要加强体育锻炼，增强体能，要定期进行身体检查和自我心理测定。 二是注意工作环境 电脑室内光线要适宜，不可过亮或过暗，避免光线直接照射在荧光屏上而产生干扰光线，工作室要保持通风干爽，能使那些有害气体尽快排出，尽量用非击打式打印机减少噪音。 三是注意正确的操作姿势 应将电脑屏幕中心位置安装在与操作者胸部同一水平线上，最好使用可以调节高低的椅子。坐着时应有足够的空间伸放双脚，不要交叉双脚，以免影响血液循环。 四是注意保护视力 要避免长时间连续操作电脑，注意中间休息。要保持一个最适当的姿势，眼睛与屏幕的距离应在40－50厘米，使双眼平视或轻度向下注视荧光屏，这样可使颈部肌肉轻松，并使眼球暴露面积减小到最低。如果出现眼睛干涩、发红，有灼热或有异物感，眼皮沉重，看东西模糊，甚至出现眼球胀痛或头痛，那就需要到医院看眼科医生了。 五是注意补充营养 电脑操作者在荧光屏前工作时间过长，视网膜上的视紫红质会被消耗掉，而视紫红质主要由维生素A合成。因此，电脑操作者应多吃些胡萝卜、白菜、豆芽、豆腐、红枣、橘子以及牛奶、鸡蛋、动物肝脏、瘦肉等食物，以补充人体内维生素A和蛋白质。而多饮些茶，茶叶中的茶多酚等活性物质会有利于吸收与抵抗放射性物质。 六是注意保持皮肤清洁 电脑荧光屏表面存在着大量静电，其集聚的灰尘可转射到脸部和手的皮肤裸露处，时间久了，易发生斑疹、色素沉着，严重者甚至会引起皮肤病变等。 电脑族的保健 电脑族可多喝 绿茶、菊花茶 电脑族除了多接触到电磁辐射外，电脑荧光屏的闪动对眼睛也有较强的刺激作用。 长期使用电脑者，易患眼病。专家认为，平时多喝绿茶可起到一定的抗辐射作用。此外，菊花对治疗眼睛疲劳、视力模糊有很好的疗效，经常觉得眼睛干涩的电脑族，多喝些菊花茶有利无害。 许多人都知道，长期使用电脑会影响健康。 脑族容易带来下肢静脉曲张、颈椎病 、腰椎间盘突出以及眼部疾患。 眼睛处于紧张状态 由于电脑族久坐电脑前，看东西较近，迫使眼睫状肌处于收缩紧张状态，从而使晶体变凸以适应视近物，眼睛长期处于紧张状态而得不到休息就会导致近视。视觉的过度疲劳还会引起房水运行受阻，较易导致青光眼。同时，干眼症、白内障、角膜溃疡和视网膜剥脱等，也是长期使用电脑者易患的眼病。 电脑族除了多接触到电磁辐射外，电脑荧光屏的闪动对眼睛也有较强的刺激作用，让人出现流泪、视力减退、头昏脑涨等不适征状。 绿茶抗辐射作用 专家认为，平时多喝绿茶可起到一定的抗辐射作用。《神农本草》把茶列入365种药物之中，并说“茶味苦，饮之使人益思，少卧，轻身明目。” 专家认为，绿茶中含有的维生素C、维生素E，特别是茶多酚，具有很强的抗氧化活性，可以清除人体内的氧自由基，从而起到抗辐射、增强机体免疫力的作用。 此外，茶叶中含有胡萝卜素，它在肠壁和肝脏的作用下，可以转变为维生素A。而维生素A具有滋养眼睛、缓解眼睛疲劳、预防夜盲症的作用。 使大脑更敏捷 不久前，英国科学家研究发现，喝茶可以阻止人体中一种酶的合成，这种酶会破坏脑细胞间传递信息的媒介乙酰胆碱。因此，喝茶对常用电脑的上班族来说，又多了项使大脑更敏捷的好处。 过去陆陆续续的医学报告显示，茶叶中经分离鉴定的已知化合物700多种，其中包括蛋白质、脂肪、糖类及多酚类、皂甙、生物碱、茶氨酸、色素、芳香物质等。 菊花茶呵护眼睛 此外，电脑族也可用菊花茶“呵护”眼睛。华人自古就知道菊花有保护眼睛的作用，菊花对治疗眼睛疲劳、视力模糊有很好的疗效。 菊花茶加入枸杞 本草纲目》记载菊花“性甘、味寒，具有散风热、平肝明目之功效”。现代药理表明，菊花里含有丰富的维生素A，是维护眼睛健康的重要物质。菊花茶能让人头脑清醒、双目明亮，特别对肝火旺、用眼过度导致的双眼干涩有较好的疗效，经常觉得眼睛干涩的电脑族，多喝些菊花茶有利无害。 喝菊花茶方法简单，只要将市面上销售的，干燥后的菊花泡水或煮来喝就可以，平时可以定时泡一两杯菊花茶来喝，能达到眼睛保健的作用，如果每天喝三到四杯的菊花茶，对视力也有帮助。也有人喜欢在菊花茶中加入枸杞，泡出来的茶就是有名的“菊杞茶”，具有更高的护眼睛作用，因为菊花与枸杞都是中药护眼的药材。 值得注意的是，菊花性凉，虚寒体质，平时怕冷，易手脚发凉的人不应该经常饮用，应该适量的喝。 谨防电脑危害 OFFICE里，电脑是我们最重要的一件办公用品，很难想像，如果没有了电脑，我们将如何工作。但遗憾的是，当我们享受着电脑带给我们的一切方便的同时，也不得不接受它在身心两方面对我们健康的威胁。所以，了解电脑“病”，防治电脑“病”，已经成为我们刻 不容缓的事情。为了全面了解电脑对OL身心的负面影响，我们特地组织这次策划，全面介绍缓解OL们最难逃脱的八大电脑“病”的窍门和方法。 罪状一：电磁辐射 症状：失眠、内分泌紊乱 致病原因：显示器热度过高，在工作时就会有相当多的电磁辐射，它会使空气发生电离作用，不断产生正电荷(正离子)，并不断与空气中的负离子中和，导致负离子的含量几乎为零。负离子多有益，正离子就多有害，长期处于正离子过多的环境中，它们通过呼吸进入肺，然后随血液循环被输送到人体的各个组织，使人的血液、体液呈酸性，延缓身体正常的代谢功能，使毒素囤积在体内。使人失眠、免疫力下降、女性内分泌紊乱等。 缓解方法 1. 仔细地打扫办公环境。因为正离子会牢牢地吸附在灰尘颗粒上，灰尘越多，则正离子越多。 2. 多喝茶。茶叶中含有的茶多酚等活性物质，有助吸收放射性物质。 3. 显示器散发出的辐射多数不是来自它的正面，而是侧面和后面。因此，不要把自己显示器的后面对着同事的后脑或者身体的侧面。 4. 常喝绿茶。绿茶是近几年来最为人所津津乐道的养生饮品，因为其中含强效的抗氧化剂儿茶酚以及维他命C，不但可以清除体内的自由基，还能使副肾皮质分泌出对抗紧张压力的荷尔蒙，对于情绪暴躁有很大改善。不过，最好在白天饮用，以免影响睡眠。 5. 绿豆可以清热解毒、利尿消肿，薏仁则可以健脾止泻、轻身益气，经常需要熬夜工作或是心烦气躁、口干舌燥、便秘时，对于消除烦躁情绪非常有帮助。 6. 勤洗脸可以防止辐射波对皮肤的刺激。 7. 在电脑桌下摆放一盆植物或水，可以吸收电脑所发出的电磁波。 8. 尽量使用液晶显示器。 9. 穿着防辐射肚兜。 罪状二：灰尘场 症状：皮肤过敏 致病原因：处于开机状态的显示器周围会形成一个静电场，它差不多会把整个房间的空气中悬浮的灰尘吸入自己的场中，从而使得面部皮肤受到刺激，会出现过敏起疹等现象。坐在电脑前，你的周围便充满了含有大量灰尘颗粒的空气，因此，使用者的皮肤非常容易产生皮疹等过敏现象。 缓解方法 1. 不要在电脑周围摆放堆积如山的纸和文件，应该把所有必需的文件分门别类地放进柜子，因为纸张和文件上的灰尘通常不易清洁。 2. 电脑桌表面用湿布蘸着抗静电剂擦拭。 3.</description>
    </item>
  </channel>
</rss>
