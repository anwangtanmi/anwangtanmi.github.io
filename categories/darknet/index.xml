<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>darknet on 暗网探秘</title>
    <link>https://anwangtanmi.github.io/categories/darknet/</link>
    <description>Recent content in darknet on 暗网探秘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 06 Dec 2021 17:14:26 +0800</lastBuildDate>
    <atom:link href="https://anwangtanmi.github.io/categories/darknet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>暗网网址导航大全（2021年12月更新）</title>
      <link>https://anwangtanmi.github.io/posts/9b95da130ea943dbd082cf1a171a19e7/</link>
      <pubDate>Mon, 06 Dec 2021 17:14:26 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/9b95da130ea943dbd082cf1a171a19e7/</guid>
      <description>由于2021年10月Tor项目将彻底禁用V2暗网域名，这里只给大家整理了Tor项目支持且存活的V3暗网网站域名，最新的2021暗网网址入口如下：&#xA;1、Facebook – Log In or Sign Up&#xA;https://www.facebookwkhpilnemxj7asaniu7vnjjbiltxjqhye3mhbshg7kx5tfyd.onion&#xA;Facebook的暗网网页。&#xA;2、FREECITY&#xA;http://xbtppbb7oz5j2stohmxzvkprpqw5dwmhhhdo2ygv6c7cs4u46ysufjyd.onion&#xA;需注册登录。网站含有交易与论坛两个部分。交易包括【weed】的店铺、【rcou1985】的店铺、暗资料集中营、QP/CP专属、账户交易专属、数据情报、服务接单、虚拟资源、实体物品、微信专卖、特色专属、CVV梳理、私人担保等分类；论坛部分包括暗网信息、数字资产信息、黑客技术、武汉新闻、免_源路、社群、开发员、GoogleDrive、资源分享、其他这些分类。&#xA;3、Riseup&#xA;http://vww6ybal4bd7szmgncyruucpgfkqahzddi37ktceo3ah7ngmcopnpyyd.onion&#xA;提供服务，服务包括 Email (IMAP)、 Chat (XMPP) 和 VPN，有中文页面。&#xA;4、TheGuardian&#xA;http://xp44cagis447k3lpb4wwhcqukix6cgqokbuys24vmxmbzmaq2gjvc2yd.onion&#xA;此网站用于保护新闻记者和消息来源的线人。可上传下载相对安全的页面的网站，有中文界面。&#xA;5、暗网中国成人站&#xA;http://pfsprke3vbj7w2tohdyexu4nyda3eajc77hyxesw2act6ifoqj67p2qd.onion&#xA;需要支付0.003BTC成为会员，才能观看色情影片。诈骗网站，请勿支付！&#xA;6、National Police of the Netherlands&#xA;http://tcecdnp2fhyxlcrjoyc2eimdjosr65hweut6y7r2u6b5y75yuvbkvfyd.onion&#xA;荷兰国家警察&#xA;7、茶马古道&#xA;http://7zj4oshsyhokgus6fyk7pmdiubu4mkjpjjprjkvopnhnwylr522tymqd.onion&#xA;需注册，以美元、比特币交易，销售数据、账户、药品、漏洞、色情影视、实体商品等。&#xA;8、US Central Intelligence Agency&#xA;http://ciadotgov4sjwlzihbbgxnqg3xiyrg7so2r2o3lt5wz5ypk4sxyjstad.onion&#xA;中央情报局是美国联邦政府的外国情报服务机构，主要负责通过使用情报人员来收集，处理和分析来自世界各地的国家安全信息。&#xA;9、社工库&#xA;http://kgaalsjzcz3o2ydu4tvdwcwxyabx26sx2tbdbtmqmc6tamyptpdhk5id.onion&#xA;需登录，以QQ,账号ID,密码,邮箱账号,手机号,电话,身份证,姓名中一个查询其他或更多相关信息。&#xA;10、SecureDrop of The New York Times&#xA;https://ej3kv4ebuugcmuwxctx5ic7zxh73rnxt42soi3tdneu2c2em55thufqd.onion&#xA;纽约时报的SecureDrop站点&#xA;11、Ahmia — Search Tor Hidden Services&#xA;http://juhanurmihxlp77nkq76byazcldy2hlmovfu2epvl5ankdibsot4csyd.onion&#xA;暗网搜索引擎，搜索出来的内容全是暗网网址，并且部分网站会带有介绍。&#xA;12、BETTOR&#xA;http://bettorz2lxff34exmszrmm7m3o6dfxcnavu7i42g34qmped6n3dmmvid.onion&#xA;下注类型的赌博网站，大部分是通过比赛得分进行下注。&#xA;13、Black Market – Guns Arms Ammo Drugs for Bitcoin – Supplier since 2001</description>
    </item>
    <item>
      <title>暗网网址大全</title>
      <link>https://anwangtanmi.github.io/posts/b81f562fd4a6e8ef6b7058607213e702/</link>
      <pubDate>Fri, 15 Nov 2019 16:15:26 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/b81f562fd4a6e8ef6b7058607213e702/</guid>
      <description>小编寻遍各大网站找到的一些暗网网址，有兴趣的拿走 （原谅懒惰的小编，将就着看吧）&#xA;温馨提示：心脏不好的、有洁癖的、有一定的心里疾病者请远离，好奇心害死猫&#xA;网友反映说，里面很多网址打不开，原因有两个：1. 很多网站不是24小时开放，2. 据说暗网规模从一前3万+的规模变成了目前的2000+，很多网站关门了。所以想要获取自己想要的信息，可以多用一用暗网的搜索引擎。就相当于你平时是用百度，而不是直接记住网站的域名一样。&#xA;tor浏览器的使用教程参照：https://blog.csdn.net/qq_36561697/article/details/82153779&#xA;推荐几个tor搜索引擎： https://blog.csdn.net/qq_36561697/article/details/82154435&#xA;暗网网址集合 1.tor浏览器的默认搜索引擎–DuckDuckGo https://3g2upl4pq6kufc4m.onion/2.not Evilhttp://hss3uro2hsxfogfq.onion/3.tor的网址之家http://torlinkbgs6aabns.onion/4.torchhttp://xmh57jrzrnw6insl.onion/5.onion.cabhttps://onion.cab/ 1 Hour Laundry: http://ppgnpc24t2qprspq.onion/http://5mkcloe3kuefrqvr.onion/ AYPSELA news: http://7ueo7ahq2xlpwx7q.onion/http://4jdirmqv2o65dlum.onion/ Agora: http://agorahooawayyfoe.onion/http://agorazbdc4zq5oww.onion/ Agora Registration: http://agorahooawayyfoe.onion/ http://agorazbdc4zq5oww.onion/ Amberoad: http://amberoadychffmyw.onion/http://e2lp3d74xdfqmguk.onion/ Andromeda: http://andromedam363aux.onion/http://dlifghyxshlgjlzw.onion/ App Store Voucher Cards: http://imgbifwwqoixh7te.onion/ http://b35trto3blj4bpq4.onion/ Apple Palace: http://gzrwnac642oodslp.onion/http://kcan7d4ahhryu6gg.onion/ Apple iPhone 5c: http://imgbifwwqoixh7te.onion/http://b35trto3blj4bpq4.onion/ Assassination Market: http://assmkedzgorodn7o.onion/ http://ugq2p64trcyg3xgt.onion/ Beneath VT: http://74ypjqjwf6oejmax.onion/http://y4hzxepemtqcf4qh.onion/ BitPharma: http://s5q54hfww56ov2xc.onion/http://pharmajiyhpjflqi.onion/ Bitcoin-escrow: http://escrotur3wica6ki.onion/http://zkwwpiiksjafjo35.onion/ Bitiply!: http://vu2wohoog2bytxgr.onion/http://3ioo62dyl5xawlmw.onion/ Black Market: http://dgoega4kbhnp53o7.onion/http://dgoegaf7vnu3uowm.onion/ Brainmagic: http://ll6lardicrvrljvq.onion/http://5j7o54ivsh3qqgu3.onion/ Brave Bunny: http://braveb6xgkctts5l.onion/http://sqxamnigeby5u37b.onion/ BuggedPlanet.Info: http://6sgjmi53igmg7fm7.onion/ http://yy5pepg54c5jry36.onion/ Butterfly Labs Jalapeno 5: http://imgbifwwqoixh7te.</description>
    </item>
    <item>
      <title>kali 之Tor浏览器安装</title>
      <link>https://anwangtanmi.github.io/posts/6cac15ee08a628efa97685481031a58d/</link>
      <pubDate>Wed, 24 Jul 2019 17:20:50 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/6cac15ee08a628efa97685481031a58d/</guid>
      <description>1.安装Tor&#xA;apt-get install tor 2.去tor官网下载一个适合你的系统的Tor。这里kali安装使用Linux。（需要代理连接）&#xA;https://www.torproject.org/projects/torbrowser.html.en 3.下载之后直接双击解压出来。&#xA;4.点击开始，出现错误。&#xA;注：kali 为了安全考虑。会禁止使用root用户去执行。&#xA;解决方案：&#xA;找到解压目录，然后找到 start-tor-browser文件，打开。找到下图位置。然后把0修改1&#xA;这里id=0 为root 账号， 然后修改成任意数字不为0即可。 5.然后双击即可访问。(若还出现错误，看一下目录权限。)&#xA;安安静静变优秀。 –极梦C&#xA;from：https://www.cnblogs.com/pangya/p/10266590.html</description>
    </item>
    <item>
      <title>X-Shadow暗影币如何保证交易的真实性？</title>
      <link>https://anwangtanmi.github.io/posts/4998b518bb23166196983303480a960c/</link>
      <pubDate>Sat, 29 Jun 2019 22:09:08 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/4998b518bb23166196983303480a960c/</guid>
      <description>比特币火了，区块链技术爆红，虚拟币如过江之鲫一般，一个接一个，大家总能听到新币的名字。新币里面，有浑水摸鱼的，可也有不少货真价实的，比如X-Shadow暗影币。这时候很多人要问了，这种交易怎么确保安全性呢？其实这个很简单。&#xA;没有核心化机构做记录，若何保障一笔交易的真实性呢？虚拟币采用的是分布式记账的形式，譬如张三向李四转了100元，全网络的节点都记录一条由张三私钥生成的交易信息：某年某月他日某时某分某秒（时间戳），张三向李四转了100元。虚拟币账户的余额是依据交易记录算出来的，所以李四不会去否认这笔交易；而张三假如想否认，需要窜改大多账本的记录，这难度不小。&#xA;古昔婚配，没有民政局公证，大家就采用类似分布式记账的形式，经过婚礼，让四周围的亲朋好友一起见证一对新人结为伉俪。婚礼越显赫，见证的人越多，印象越深刻。然而，在现代社会形态，因为有政府的公证，婚礼的这局部效用就减弱了。不少的年青人起始不办婚礼，两私人旅行婚配，发个朋友圈了事。&#xA;去核心化和核心化各有利弊，要依据实况采用合宜的方案。只有分布式记账还不够，大家可以乱记账，以致账本不相符。若何让大家认真负责的记账呢？这就引出了共识机制。&#xA;现下，主要的共识机制有三种：PoW、PoS、DPoS。&#xA;PoW：全称Proof of Work，办公证实。大家一起解一道复杂的数学题，谁解出来，谁就可以记账。解题是一个几率事情，与计算量正相关。早期的虚拟币，譬如比特币、莱特币采用的就是PoW共识机制。PoS：全称Proof of Stake，股权证实。在这种模式下，有一个名词叫币龄，每个币每日萌生1币龄。记账权与账户的币龄体积正相关。一朝记账完成则币龄清空，从新累积。以太坊第四个阶段Serenity（宁静）采用就是PoS共识机制。DPoS：全称Delegated Proof of Stake，委任权利证实。它的原理是让每一个保有虚拟币的人施行投票，由此萌生多位代表（超级节点）。各个代表间依据PoS的共识算法竞争记账权。比较新的虚拟币，譬如变态S、YOYOW采用的就是DPoS机制。DPoS大幅缩小了参与验证和记账的节点数量，可以达到秒级的共识验证。&#xA;还有一点更复杂的共识机制， 譬如投注共识、实用拜占庭容错等，就不一一绍介了。为了提倡积极记账，第一个完成记账的人可以得到虚拟币奖惩，这就是币圈常说的“挖矿”，参与记账的人被称为“矿工”。记账权按几率随机颁赠“矿工”，“矿工”照实记录就可以得到奖惩。假如“矿工”想要捣乱、造假，乱填信息或删除信息，因为同时记账的矿工众多，一朝出现记账冲突，系统以最多相同信息的记录为准。窜改记录不单不会达成系统认可，还亏折了最先完成记账的系统奖惩。新交易的第一个记账操作被系统确认后，全网其他节点便会半自动同步这条交易记录，实行账本的一统。&#xA;对此，大家了解了为什么区块链这么安全了吗？这是很好的机制，很不错的鼓励模式。X-Shadow暗影币基于此，还有更多的激励创新，一定能给虚拟币带来更多的发展。&#xA;(老师V：cangbao30)</description>
    </item>
    <item>
      <title>kali使用tor网络进行socks5代理记录</title>
      <link>https://anwangtanmi.github.io/posts/bc85b3d5a53e03f50921e056e8af3a04/</link>
      <pubDate>Wed, 26 Jun 2019 16:15:13 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/bc85b3d5a53e03f50921e056e8af3a04/</guid>
      <description>Linux kali 4.19.0-kali5-amd64 #1 SMP Debian 4.19.37-2kali1 (2019-05-15) x86_64 GNU/Linux&#xA;试过下载linux版本的tor压缩包，但是安装不了&#xA;最后&#xA;apt-get install tor&#xA;root@kali:~# apt-get install tor 正在读取软件包列表... 完成 正在分析软件包的依赖关系树 正在读取状态信息... 完成 将会同时安装下列软件： tor-geoipdb torsocks 建议安装： mixmaster torbrowser-launcher tor-arm apparmor-utils obfs4proxy 下列【新】软件包将被安装： tor tor-geoipdb torsocks ... 正在设置 torsocks (2.3.0-2) ... 正在设置 tor-geoipdb (0.3.5.8-1) ... 正在处理用于 man-db (2.8.5-2) 的触发器 ... 正在处理用于 systemd (241-3) 的触发器 ... Scanning processes... Scanning linux images... Running kernel seems to be up-to-date. No services need to be restarted.</description>
    </item>
    <item>
      <title>（TOR）内部架构</title>
      <link>https://anwangtanmi.github.io/posts/1487de900d85ab0990c5645d685ddf16/</link>
      <pubDate>Sun, 03 Mar 2019 16:52:01 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/1487de900d85ab0990c5645d685ddf16/</guid>
      <description>如图1所示，以便于了解内部流程如何影响流经Tor中继的客户端流量。[1]&#xA;1 TCP连接（connection）的多路复用。Tor中的所有中继使用成对TCP连接进行通信，即每个中继与彼此通信的每个中继形成单个TCP连接。 由于一对继电器可能同时为多个电路（circuit）传送数据，因此该对之间的所有电路都通过其单个TCP连接进行多路复用。 每个电路可以承载用户可能正在访问的多个服务或流（stream）的流量。 TCP在多路复用连接时提供可靠性，在中继之间按顺序传送数据包，以及可能不公平的内核级拥塞控制[47]。 了解连接，电路和流这三者的不同对于理解Tor非常重要。&#xA;2 TCP连接输入。 Tor使用libevent处理内核TCP缓冲区的输入和输出。 Tor使用libevent注册要读取的套接字，并配置通知回调函数。 当数据到达内核TCP输入缓冲区时（figure 1a），libevent通过其轮询接口了解活动套接字，并异步执行相应的回调（figure 1b）。 执行时，读取回调使用令牌桶确定读取资格。&#xA;令牌桶用于限速连接。 Tor按照配置的带宽限制以1秒的间隔填充桶，同时在读取数据时从桶中移除令牌，尽管目前正在探索改变该间隔以提高性能[53]。 有一个全局读取存储区限制了从所有连接读取的带宽，以及一个单独的存储区，用于基于每个连接进行限制（figure 1c）。 如果全局存储桶或其连接存储桶为空，则连接可能会忽略读取事件。 实际上，每连接令牌桶仅用于边缘（非中继）连接。 连接限制通过惩罚噪声连接（例如批量传输）来减少网络拥塞，并且通常会带来更好的性能[17]。&#xA;当TCP输入缓冲区符合读取条件时，循环（RR）调度机制用于读取每个连接中16 KiB和18个全局令牌桶大小中较小的一个（figure 1d）。 这种限制是为了公平起见，因此单个连接不能消耗单个读取上的所有全局令牌。 然而，最近的研究表明，输入/输出调度会导致不公平的资源分配[54]。 从TCP缓冲区读取的数据放在每个连接的应用程序输入缓冲区中进行处理（figure 1e），具体来说，在数据到达连接输入缓冲器之后，立即将单元重新排列到它们各自的电路队列中（按FIFO顺序），在那里它们等待进一步处理。这也是用于确保匿名的加密操作的地方。正如之前的工作所表明的那样，这些操作并不是性能瓶颈[61]。因此可以在这里安全地忽略它们。&#xA;3 流量控制。 Tor使用端到端流量控制算法来帮助保持稳定的电池流过电路。客户端和出口继电器构成电路的边缘：每个都是穿过Tor网络的数据的入口和出口点。边缘使用称为窗口的单元计数器跟踪电路和流的数据流。入口边缘在发送信元时递减相应的流和电路窗口，当其流窗口达到零时停止从流中读取，并且当电路窗口达到零时停止从电路上复用的所有流中读取。在从出口边缘接收到SENDME确认信元时，Windows递增并且恢复读取。&#xA;默认情况下，电路窗口初始化为1000个单元（500 KiB），流窗口为500个单元（250 KiB）。在出口边缘接收100个信元（50 KiB）后，电路SENDME被发送到入口边缘，允许入口边缘读取，打包和转发100个附加信元。在接收50个小区（25 KiB）之后发送流SENDME并允许另外50个小区。窗口大小会对性能产生重大影响，最近的工作提出了一种动态计算它们的算法[7]。&#xA;4 细胞处理和排队。 数据在到达连接输入缓冲区时立即被处理（figure 1f），并且每个单元根据其通过电路的方向加密或解密。 然后将单元切换到与下一跳相对应的电路上，并放入电路的先进先出（FIFO）队列（figure 1g）。 单元在电路队列中等待，直到电路调度器选择它们进行写入。&#xA;5 调度。 当连接的输出缓冲区中有可用空间时，继电器决定选择多个多路复用电路中的哪一个进行写入。 虽然历史上这是使用循环法完成的，但最近在Tor [52]中引入了新的指数加权移动平均（EWMA）调度程序，并且目前默认使用（figure 1h）。 EWMA记录它为每个电路调度的数据包数量，随着时间的推移呈指数衰减数据包计数。 调度程序在从具有最低数据包计数的电路中选择的时间写入一个单元，然后更新计数。 衰减意味着最近发送的数据包对计数的影响更大，而突发流量不会显着影响调度优先级。&#xA;6 连接输出。 已选择并写入连接输出缓冲区的单元（figure 1i）会激活为该连接注册libevent的write事件。 一旦libevent确定可以写入TCP套接字，就会异步执行写回调（figure 1j）。 与连接输入类似，中继检查全局写入桶和每个连接写入桶的令牌。 如果存储桶不为空，则连接符合写入条件（figure 1k），并且允许再次写入每个连接的16 KiB和1 8全局令牌桶大小（figure 1l）。 数据被写入内核级TCP缓冲区（figure 1m）并发送到下一跳。&#xA;参考文献：&#xA;[1] Jansen R, Syverson P, Hopper N.</description>
    </item>
    <item>
      <title>（TOR）第二代洋葱匿名网络 简介</title>
      <link>https://anwangtanmi.github.io/posts/a0a6dc7fe472f3079bdb7cdc065d84ff/</link>
      <pubDate>Sun, 03 Mar 2019 15:54:32 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/a0a6dc7fe472f3079bdb7cdc065d84ff/</guid>
      <description>第二代洋葱匿名网络Tor简介[1] Tor可能是最受欢迎的在线匿名服务。Tor基于源自Chaum的Mix网络概念，沿着洋葱路由的安全加密路径，将数据打包成相同大小的单元。其中每个路由仅知道其前驱和后继路由器，通过电路上洋葱路由器的有限信息实现匿名。在匿名链路的每一跳中，根据流的方向逐层加密或解密。没有中间节点能够读取单元内容，并且单元总是改变外观，使得流不能通过网络观察链接到用户。&#xA;具体来说，客户端首先通过三个洋葱路由扩展电路：客户选择一个持久的入口路由作为其第一个节点，选择一个新的随机中间节点，并选择最后一个退出节点，使其能够连接到Tor网络外部的目标Internet服务。洋葱路由通过电路在两个方向上转发流量，进行客户端与其通信对等体之间的通信。[2]&#xA;Tor的受欢迎程度部分归功于其设计提供的灵活性：外部对等方不需要运行Tor，甚至不需要知道客户端是通过Tor网络连接的。但是，连接到外部对等方的客户端仍必须依赖现有的DNS和SSL / TLS证书身份验证系统，而外部对等方本身不是匿名的。为了缓解这些问题，Tor还开发并维护了一个洋葱服务协议，这是一种通信模式，用户及其对等方都运行Tor并构建连接在一起的电路。所有通信都是Tor网络的内部通信，因此用户及其对等方都享有匿名和端到端加密，而不依赖于外部不安全的名称和证书身份验证系统。[2]&#xA;1.Tor的网络结构 Tor网络由洋葱路由器组成，由志愿者提供。打算使用Tor匿名连接到某个Internet主机的用户选择通常三个洋葱路由器的子集，并在这些路由器之间建立所谓的电路。同时通过Tor网络行进时，用户的数据被封装在细胞固定大小（512个字节）的。这些小区沿着形成电路的洋葱路由器链转发。在沿着电路的一对洋葱路由器之间，小区通过TLS安全的TCP连接，其终止于洋葱路由器。也就是说，用户与该用户连接的主机之间没有端到端的TCP连接。相反，Tor网络充当SOCKS代理。该洋葱路由器之间的TCP / TLS连接是按需透明建立的，因此，对于我们的目的，Tor洋葱路由器网络可以被视为全网状覆盖。&#xA;应用层（Tor的洋葱路由器软件）在传入连接上接收信元，应用保持匿名所需的加密操作，然后通过另一个TCP连接沿着电路进一步转发信元。对于此处考虑的问题，非常重要的是要注意来自遍历同一对洋葱路由器的所有电路的所有小区在同一TCP连接上复用。因此，这些TCP连接可以被视为覆盖网络中的链路，其可能同时被潜在的许多用户的电路使用。&#xA;Tor用户选择的所谓出口路由器是沿着电路的最后一个洋葱路由器。出口路由器建立与主机的TCP连接以及Tor用户打算匿名连接的端口。因此，联系的主机无法看到用户的IP地址，只能看到退出路由器的地址。来自Tor用户的有效载荷数据通过Tor单元到达; 退出路由器解包这些单元并将数据转发给联系的主机。相反，如果数据从主机向用户传输，则退出路由器将数据打包到Tor单元中，并通过Tor覆盖将这些数据发送给用户。&#xA;洋葱路由器的每个运营商都可以配置带宽限制。洋葱路由器不允许使用比此限制更多的带宽。因此，运营商可以控制她想要贡献多少资源，并且可以确保不超过存在的限制，例如，由于提供商合同。通常，Tor中配置的带宽限制低于洋葱路由器物理可用的带宽。事实上，这是Tor设计中隐含的一个重要假设：当今互联网的瓶颈通常不在网络骨干网中，而是在接入链路上。如果配置的限制低于相应的接入链路容量，则TCP拥塞控制和公平性将不会干扰由Tor确定的带宽分配。因此，洋葱路由器运营商应注意配置不太大的带宽限制。在这里，我们主要关注Tor内的调度机制，从而做出相同的假设。&#xA;参考文献：&#xA;[1]TSCHORSCH, F., AND SCHEUERMANN, B. Tor is Unfair–and What to Do About It, 2011.&#xA;[2]Jansen R, Juarez M, Galvez R, et al. Inside job: Applying traffic analysis to measure Tor from within[C]//Network and Distributed System Security Symposium (NDSS). 2018.</description>
    </item>
    <item>
      <title>Tor使用手册</title>
      <link>https://anwangtanmi.github.io/posts/a0b8fa0772177b1710941992b11bf274/</link>
      <pubDate>Fri, 11 Jan 2019 17:07:04 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/a0b8fa0772177b1710941992b11bf274/</guid>
      <description>1. 关于Tor浏览器 Tor浏览器使用Tor匿名网络保护你的隐私及匿名性。使用Tor网络有主要有两个特点：&#xA;你的互联网服务提供者(ISP)，以及任何能够监控你的本地流量的人，都将无法跟踪你的网络活动，其中包括你所访问的网站的地址及名称； 你所使用的网络服务或访问的网站的提供者，以及所有能监控他们的人，都只能看到你的连接来自Tor匿名网络，而无法看到你的真实IP地址。因此，除非你自己透露之，否则他们无法得知你的身份。 除此之外，Tor浏览器还被设计得能够防止网站通过你的“指纹”或浏览器设置来识别你的身份。&#xA;默认设置下，Tor浏览器不会保存你的任何浏览历史。Cookie只在单次的会话中有效（退出Tor浏览器或请求新身份后失效）。&#xA;2.1 Tor工作原理 Tor是一个建立在虚拟隧道之上的网络，旨在提升你在互联网上的隐私性及安全性。Tor会将你的网络流量随机地通过3台架设在Tor匿名网络之内的服务器（又称节点），然后最后一个节点（又称“出口节点”）再将你的流量发送至公共互联网。&#xA;上面这张图片描绘了一个用户使用Tor浏览不同的网站。绿色屏幕的电脑代表了Tor网络中的各个节点，而那三把钥匙则代表了用户及各个节点之间的加密层。&#xA;Tor之所以拿洋葱当图标，就是因为在其数据传输过程中各节点的层层解密（加密）就像剥洋葱一样。&#xA;3. 下载 下载Tor浏览器最安全且最简单的办法是前往Tor Project的官方网站。你与Tor官网的通讯采用HTTPS加密，使得他人难以破坏。&#xA;然而，有时你也可能无法访问Tor Project的网站：比如，当其被你所使用的网络屏蔽时。一旦遇到这样的情况，你可以采用如下办法下载Tor浏览器。&#xA;尽管以下的各种方法已经是Tor下载受到审查的情况下的备用之选，但由于大陆的网络封锁极为严重，因此在没有其它翻墙工具辅助的情况下，只有使用Email的方式可能有效。&#xA;3.1 GetTor GetTor服务可以自动回复给你最新版本Tor浏览器的下载地址，其服务器广泛分布于不同位置，比如Dropbox，Google Drive及Github。&#xA;3.1.1 通过Email使用GetTor 发送邮件给[email protected]，在邮件的正文中根据你所使用的操作系统简单地写上“windows”，“osx”或者“linux”（不要加引号）； GetTor将会自动回复你一封电子邮件，其中包含Tor浏览器下载地址、密码学签名（用来校验下载到的软件包）、对软件包进行了签名的密钥的指纹及软件包校验值。你可能会收到“32位”和“64位”两种软件包，如何选择取决于你计算机类型。 3.1.2 通过Twitter使用GetTor 假如你想获取英文版的支持OS X的Tor浏览器，则发送私信“osx en”至@get_tor（无需follow该账户）。 3.1.3 通过Jabber/XMPP (Tor Messenger, Jitsi, CoyIM)使用GetTor 假如你想获取中文版的支持Linux的Tor浏览器，则发送私信“linux zh”至[email protected]。 3.2 Satori Satori是一个Chrome/Chromium浏览器的扩展，其允许你通过不同的下载源，下载多个安全及隐私相关程序。&#xA;使用Satori下载Tor浏览器：&#xA;从Chrome App商店安装Satori； 在你浏览器的Apps菜单选中Satori； 打开Satori后选择你的语言偏好。之后的菜单会列出你所选择的语言可供下载的所有程序。找到你所使用的操作系统下的Tor浏览器。程序名称后的“A”和“B”代表了不同的下载源，点击之即可开始下载； 待下载完成后，在Satori的菜单中找到“Generate Hash”选项，进入后点击“选择文件”； 选择下载好的Tor浏览器软件包，Satori会计算并显示出其校验值，将这个值与原始校验值进行比较（原始校验值可以在下载开始后点击“checksum”找到）。如果两个校验值匹配则证明下载成功，如不匹配，则需要你（换个下载源）重新下载。 4. 第一次运行Tor浏览器 第一次运行Tor浏览器时会看到Tor网络设置窗口。通过它你可以选择直接或通过特殊配置连接到Tor网络。&#xA;4.1 连接 多数情况下你只需选择“连接”即可连接到Tor网络。点击后，一个显示Tor连接过程的进度条会弹出。如果你有一个相对快速的网络连接，却在某个进度点上卡住了，那么请前往之后的故障排除小结。&#xA;4.2 设置 如果你确定你的连接遭到了审查，或者你想使用代理连接到Tor网络，那么请选择此项。Tor浏览器会带你进行一系列的配置选择。&#xA;第一个窗口会问你所在的网络是否屏蔽或审查了Tor。如果你觉得没有的话请选择“否”。如果你确定自己的连接遭到了审查，或者你尝试了各种连接到Tor网络的方法却未成功，那么请选择“是”。接下来你会被带到绕过审查窗口进行pluggable transport相关配置。&#xA;下一个页面会问你是否要通过代理连接到Tor网络。在大多数情况下这都是没必要的。你会清楚的知道自己是否需要进行代理设置，这是因为相同的设置在你的其它浏览器上也会被使用。如果可能的话，请向你的网络管理员寻求指导。如果你连接无需代理，请点击“下一步”。&#xA;5. 绕过审查 直接访问Tor网络有时可能会被你的互联网提供者或政府审查。Tor浏览器包含了一些帮助你绕过审查的工具。这些工具被称作“pluggable transports”。前往Pluggable Transports页可了解更多现阶段可用的传输类型。</description>
    </item>
    <item>
      <title>tor配置</title>
      <link>https://anwangtanmi.github.io/posts/64049c484fb64b315146bdf398124335/</link>
      <pubDate>Sun, 30 Dec 2018 23:27:43 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/64049c484fb64b315146bdf398124335/</guid>
      <description>运行tor browser&#xA;配置：首先我们知道国内是无法直连的，所以我们要选择configure来配置代理。然后在你的网络提供商是否对Tor网络进行了封锁或审查这里选yes。选了yes就要配置网桥，这里我们可以使用他提供的一些集成网桥，但是速度比较慢，自己去试试速度然后选个合适的。&#xA;但是我们想要更快更稳定的话，我们可以访问访问 https://bridges.torproject.org/bridges?transport=obfs4 获取obfs4网桥 。然后在 https://link.jianshu.com/?t=https://atlas.torproject.org/#search/ 网址后面加入刚才获取网桥中间的四十位字母数字来测试连接速度。速度足够快的我们保留下来几条，选自定义网桥，然后逐条填在里面。&#xA;其实这里配置已经可以使用了，但是在下一步如果我们有vpn的话，就直接选择使用本地代理，然后如果使用的是ss的话，那就直接选sock5协议，地址填127.0.0.1，端口填1080即可。在这里为什么我们还要选择vpn呢？&#xA;因为GFW的原因，很多的网桥都失效了，我们很难找到能用的网桥，就算找到了，速度也非常慢，所以如果有vpn的话，我们就可以直接绕过ISP对Tor的审查，并且速度也会非常快。接着我们选择connect，稍微等几十秒配置成功，就可以使用了。</description>
    </item>
    <item>
      <title>Tor路由学习总结1 – Glossary专业词汇表</title>
      <link>https://anwangtanmi.github.io/posts/f85480ad994047045d1caed476d441e6/</link>
      <pubDate>Fri, 28 Dec 2018 20:10:19 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/f85480ad994047045d1caed476d441e6/</guid>
      <description>1. MUST This word, or the terms “REQUIRED” or “SHALL”&#xA;即绝对必须要做的&#xA;2. MUST NOT This phrase, or the phrase “SHALL NOT”&#xA;即绝对禁止要做的&#xA;3. SHOULD This word, or the adjective “RECOMMENDED”&#xA;即存在特殊情况可以不这么做，但一般情况下还是应该遵守&#xA;4. SHOULD NOT This phrase, or the phrase “NOT RECOMMENDED” 即存在特殊情况可以这么做，但一般情况下还是不应该这么做&#xA;5. MAY This word, or the adjective “OPTIONAL”&#xA;即你可以自主选择&#xA;1.0 Commonly used Tor configuration terms&#xA;ORPort – Onion Router Port 洋葱路由端口&#xA;DirPort – Directory Port 目录服务端口&#xA;2.0 Tor network components</description>
    </item>
    <item>
      <title>剥开洋葱皮， 深度揭密Tor网络（没有真正的隐匿）</title>
      <link>https://anwangtanmi.github.io/posts/afd33a466cc7246efa87c8dea71ad661/</link>
      <pubDate>Fri, 16 Nov 2018 10:22:48 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/afd33a466cc7246efa87c8dea71ad661/</guid>
      <description>文章来自IT经理网&#xA;原文链接：https://www.ctocio.com/ccnews/16089.html​​​​​​​&#xA;不久前， 著名黑客Jacob Appelhaum与另外两名安全研究人员在德国媒体上发表了一篇文章， 通过他们得到的NSA的秘密文件以及对源代码的分析， 他们认为， NSA 已经把目标瞄准了匿名网络Tor， 并且可能已经攻破了Tor.&#xA;这个发现令人震惊， 在过去的十几年来， Tor一直被认为是能够保护那些记者， 异见人士， 或者黑客的重要匿名工具。 Tor还被电子前线基金（EFF）推荐为保护个人隐私的推荐工具。 然而， 这次的分析表明， 使用Tor的个人可以被NSA甄别出来， 通过Tor传递的所有数据都可以被记录。&#xA;对于很多人来说， NSA对Tor的渗透攻击就像是对隐私保护和言论自由等人权的法西斯式的践踏。 Appelhaum作为维基解密的志愿者以及一个Tor的开发者， 认为对Tor来说， 志愿者的行为是一种英雄主义行为， 就好像国际志愿军去西班牙与弗朗哥作战一样。&#xA;这听上去很美， 一批国际主义战士与邪恶的美帝国主义在作斗争， 但是， 事实上， Tor社区并不如想象的那么的完美。&#xA;来看看基本事实吧。 Tor是由美国军方的情报机构最初开发并且提供财务支持的。 Tor的最初目的和当前的目的是： “帮助政府情报人员和他们的线人隐藏身份， 以便于他们开展情报收集， 并且把情报回传给情报机构。”这些事实那些鼓吹和倡导使用Tor的人士并不会提到。&#xA;Tor的图标是一个洋葱， 如果我们剥开洋葱皮， 就会看到， 每个Tor的开发人员都是由五角大楼或者其它美国情报机构资助的。 其中包括了Tor的主要开发人员Roger Dingledine， 他甚至还在NSA干过。 如果你去Tor的网站， 你就会发现， Tor依然被美国政府广泛地使用着。 比如在Tor网站上， 你会看到。&#xA;“美国海军的一个机构利用Tor进行开源情报收集， 其中一个小队在最近派遣到中东执行任务时就使用了Tor. 执法机构使用Tor访问或者监控网站， 从而可以在网站日志中留下政府的IP地址。 “&#xA;Tor的发展历史&#xA;我们可以简单回顾一下Tor的发展历史。 1995年， 美国海军研究实验室的科学家开始开发一种匿名即使， 可以避免人们的行迹在Internet上被追踪到。 他们把这个技术叫做“洋葱路由”。 “洋葱路由”利用P2P网络， 把网络流量随机的通过P2P的节点进行转发， 这样可以掩盖源地址与目标地址的路径。 使得在Internet上难以确定使用者的身份和地址。 这就好像你送一封匿名信， 不是自己送或者通过邮差送， 而是大街上随便找一个不认识的人让他帮你送。 这样收信方就很难往回找到你。&#xA;这个技术最初由美国海军研究办公室和国防部高级研究项目署（DARPA）资助。 早期的开发由Paul Syverson, Michael Reed 和David Goldschla领导。 这三个人都是供职美国军方的数学家和计算机系统研究人员。</description>
    </item>
    <item>
      <title>【匿名通信】在Linux环境下编译运行tor源码</title>
      <link>https://anwangtanmi.github.io/posts/4e26ee6203d8e4ea517c12f6f73afe0a/</link>
      <pubDate>Thu, 11 Oct 2018 11:33:13 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/4e26ee6203d8e4ea517c12f6f73afe0a/</guid>
      <description> 参考原文 在Linux环境下编译运行tor源码 </description>
    </item>
    <item>
      <title>Multi-Segment应用——VTEP位于TOR交换机上</title>
      <link>https://anwangtanmi.github.io/posts/8e7b16873b3c6c1e86fa68d9c0d078de/</link>
      <pubDate>Wed, 30 May 2018 19:55:56 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/8e7b16873b3c6c1e86fa68d9c0d078de/</guid>
      <description> VXLAN的实现模型如下图： 在这个实现模型中，VTEP（VXLAN Tunnel End Point）是位于计算节点的br-tun上，但是在实际应用中，VTEP也有位于TOR交换机的情形。 VTEP位于TOR上，而不是Host内的br-tun。我们把这一段组网抽象成下图： 从用户视角，这是一个VXLAN网络，所以Neutron对外暴露的接口（模型）仍然是Network。但是在具体实现时，VTEP位于TOR上，而且，TOR还需要做VNI（VXLAN ID）到VLAN ID的映射（VLAN1、VLAN2、VLAN3、VLAN4）。这个映射并不能随意映射，因为TOR交换机上的VLAN ID，也不能任意取值，需要经过规划。所以Neutron就有了如下模型： segment实际上是一个列表，这个列表的元素是[provider:physical_network,provider:network_type,provider:segmentation_id],Neutron正是通过这三个字段描述了需要描述的信息（比如VLAN ID，即provider:segmentation_id）。 说到这里，你可能会问，那个VXLAN网络的VNI，在哪里输入？这个VNI的赋值，由Neutron内部自动生成，而它生成的方法是根据配置文件的规则。 通过上述的这个场景（VTEP位于TOR上），我们可以总结出Network模型中的segments字段的用途： 1 使用场景：主要是VTEP位于TOR上。 2 用户体验：用户感觉到的只是一个普通租户，感觉不到实现细节。 3 字段用途：由于VTEP位于TOR上，Neutron内部还需要做一个网络ID的二次转换。TOR的VLAN ID是一个提前规划好的值，不能任意取值。此时，segments字段就承担这个作用，它的取值表达的就是这些提前规划好的值。 在这里，Network模型本身的网络ID相对于外部网络ID，segment字段里的网络ID相当于内部网络ID。Network本身的网络类型是VXLAN，segments字段里的网络类型是VLAN。 </description>
    </item>
    <item>
      <title>TOR原生数据填充方式（Channel Padding）</title>
      <link>https://anwangtanmi.github.io/posts/1851ee2310d7313797a96e1971bc0f2f/</link>
      <pubDate>Sat, 31 Mar 2018 16:07:40 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/1851ee2310d7313797a96e1971bc0f2f/</guid>
      <description>TOR本身已经做了这个功能了，今天发现。TOR 0.3.1.7版本加入的流量分析阻力，ChannelPadding,2017年9月&#xA;颇为绝望。今天才在GITHUB上看见TOR padding specification。&#xA;然后赶紧找了找官方的版本更新说明 原文如下：&#xA;Major features (traffic analysis resistance):&#xA;Connections between clients and relays now send a padding cell in each direction every 1.5 to 9.5 seconds (tunable via consensus parameters). This padding will not resist specialized eavesdroppers, but it should be enough to make many ISPs’ routine network flow logging less useful in traffic analysis against Tor users.&#xA;Padding is negotiated using Tor’s link protocol, so both relays and clients must upgrade for this to take effect.</description>
    </item>
    <item>
      <title>TOR源码阅读（一）</title>
      <link>https://anwangtanmi.github.io/posts/8264efbe3a59b9b8f75a449a251eba3a/</link>
      <pubDate>Mon, 12 Mar 2018 20:51:41 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/8264efbe3a59b9b8f75a449a251eba3a/</guid>
      <description>想要给研究项目留下一点可供索引的资料，所以开始了记录。&#xA;项目的主要目标是修改TOR源代码，得出一个拥有可选的伪流量功能的TOR版本。&#xA;先回答几个项目过程中一直时而清晰时而模糊的问题点：&#xA;1.为了解决什么问题。&#xA;传统互联网不被认为具有匿名性的一个原因是互联网服务提供商具有记录与追踪各网络节点间的连接的能力。即使信息内容可以通过加密传递而无法得知，但连接本身会具有记录，例如数据量，连接时间等信息。TOR虽然能创建并隐藏两电脑间的连接，两者间并无一个直接的可辨连接，但通过对连接记录进行流量分析，搜索连接时间与数据量来试图判别潜在的发送者或者接收者。且若链上节点产生变更则这一特征则会在该可记录网络中更为明显。大蒜网络是洋葱网络的变种，它在I2P的基础上将多个消息打包发送，以对抗流量分析。&#xA;伪流量功能的提出也是在可记录网络中对针对 TOR节点的分析进行对抗，流量分析可能通过时间，或者数据量等元数据进行数据挖掘找出节点间的关系链。所以团队设想，在TOR节点进行数据发送时产生一定的随机的或者恒定的虚假数据进行发送，以扰乱他们之间的元数据体现的潜在关系，则可将网络中隐藏的TOR节点进行一定的隐藏。&#xA;2.基本思路&#xA;要么，在产生数据通讯时填入填充数据保持每次数据发送的大小一致，要么，产生多个通讯连接，可是因为TOR是工作于TCP流上的，TCP通过长连接进行通讯没法进行很好的多播或者广播，所以仍有争论。&#xA;今天先写到这，没看多少，饭还是一口口吃好了，明天记录一下源码阅读的成果。&#xA;参考文献：&#xA;https://www.icann.org/news/blog/zh-3f559084-3a74-4fcc-a560-2e1b6b61c4b4&#xA;http://www.360doc.com/content/16/1208/20/1513309_613102328.shtml&#xA;http://blog.csdn.net/winscar/article/details/8848532</description>
    </item>
    <item>
      <title>windows 安装Tor 浏览器</title>
      <link>https://anwangtanmi.github.io/posts/052676bfa10a5343de227b7e22d1844f/</link>
      <pubDate>Fri, 22 Dec 2017 22:07:21 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/052676bfa10a5343de227b7e22d1844f/</guid>
      <description>1.Tor官方网站 Tor Browser for Windows</description>
    </item>
    <item>
      <title>darknet-yolo运行摄像头测试分析及过程主要代码梳理</title>
      <link>https://anwangtanmi.github.io/posts/163e64630cc7546eaac7b70bce623580/</link>
      <pubDate>Mon, 07 Aug 2017 16:54:01 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/163e64630cc7546eaac7b70bce623580/</guid>
      <description>本人是在JESON TK1开发板上实现yolo的视频实时运行测试&#xA;darknet的安装很简单，从官网上克隆代码即可：&#xA;git clone https://github.com/pjreddie/darknet.git 修改makefile文件，使用opencv和cuda&#xA;GPU=1 OPENCV=1 切换目录 cd darknet make通过就安装成功，若出现如下错误：&#xA;obj/avgpool_layer_kernels.o -o libdarknet.so -lm -pthreadpkg-config –libs OpenCV-L/usr/local/cuda/lib64 -lcuda -lcudart -lcublas -lcurand -lstdc++ /usr/bin/ld: cannot find -lcudart /usr/bin/ld: cannot find -lcublas /usr/bin/ld: cannot find -lcurand 参照cannot find -lcudart …解决方案 安装成功&#xA;下面进行视频测试 权重文件请自行在darknet官网下载，本博客使用了tiny-yolo-voc.weights tiny-yolo-coco.weights （考虑到TK1开发板性能速度问题，只使用了小模型）&#xA;VOC数据集测试，连接摄像头，运行命令&#xA;cd darknet #voc webcam test ./darknet detector demo cfg/voc.data cfg/tiny-yolo-voc.cfg tiny-yolo-voc.weights 测试速度不够快，修改网络输入图片大小到208×208，修改tiny-yolo-voc.cfg第四行&#xA;width=208 height=208 速度达到16帧左右，基本满足实时要求&#xA;同理： coco数据集测试，连接摄像头，运行命令&#xA;cd darknet #coco webcam test .</description>
    </item>
    <item>
      <title>车辆密度估计–Understanding Traffic Density from Large-Scale Web Camera Data</title>
      <link>https://anwangtanmi.github.io/posts/094e6e68ef3f186ecc3a34c4cd3a1021/</link>
      <pubDate>Wed, 19 Jul 2017 11:33:10 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/094e6e68ef3f186ecc3a34c4cd3a1021/</guid>
      <description>Understanding Traffic Density from Large-Scale Web Camera Data CVPR2017 https://arxiv.org/abs/1703.05868&#xA;本文介绍了两个算法用于车辆密度估计：1）OPT-RC 根据背景差得到车辆运动区域，对于图像的不同区域学习到一个对应的权值矩阵用于估计车辆密度 2）FCN-MT 使用 FCN 分割框架来进行车辆密度估计&#xA;车辆密度估计问题还是比较难的，类似于人群密度估计&#xA;Optimization Based Vehicle Density Estimation with RankConstraint(OPT-RC) we propose a regression model to learn different weights for different blocks to increase the degrees of freedom on the weights, and embed geometry information 用一个回归模型来学习图像区域对应不同的密度估计权值矩阵，嵌入了几何信息&#xA;FCN Based Multi-Task Learning for Vehicle Counting (FCN-MT) 网络分为 convolution network, decovolution network , 将卷积层各个层的特征融合起来，输入到反卷积网络中进行特征图放大&#xA;the large buses/trucks (oversized vehicles) in close view induce sporadically large errors in the counting results.</description>
    </item>
    <item>
      <title>Four avaiable ways to install Tor in kali</title>
      <link>https://anwangtanmi.github.io/posts/31e221c6ff9dabfe0b9d6445d52a4f71/</link>
      <pubDate>Fri, 28 Apr 2017 08:26:00 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/31e221c6ff9dabfe0b9d6445d52a4f71/</guid>
      <description>转自：https://www.blackmoreops.com/2013/12/16/installing-tor-kali-linux/&#xA;Tor is free software and an open network that helps you defend against traffic analysis, a form of network surveillance that threatens personal freedom and privacy, confidential business activities and relationships, and state security. This guide guides your through installing tor in Kali Linux.&#xA;Why anonymity matters? Tor protects you by bouncing your communications around a distributed network of relays run by volunteers all around the world: it prevents somebody watching your Internet connection from learning what sites you visit, and it prevents the sites you visit from learning your physical location.</description>
    </item>
    <item>
      <title>深度抠图–Deep Image Matting</title>
      <link>https://anwangtanmi.github.io/posts/feffcbfbf76bc6a95e98c5152ee06632/</link>
      <pubDate>Mon, 20 Mar 2017 14:25:14 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/feffcbfbf76bc6a95e98c5152ee06632/</guid>
      <description>CVPR2017 https://arxiv.org/abs/1703.03872&#xA;GitHub: https://github.com/Joker316701882/Deep-Image-Matting&#xA;抠图问题还是比较难的，简单的用一个公式表达如下： 左边是图像位置 i 的 RGB 值，右边是 前景和背景的线性组合。 matte estimation alpha 是未知的。对于每个像素，有3个已知量，7个未知量，所以这个一个 underconstrained 问题，即变量个数大于方程个数。&#xA;当前针对抠图问题的方法主要有两个问题： 1）当前方法将 matting equation 设计为两个颜色的线性组合，即将抠图看做一个 color problem染色问题，这种方法基于一个假设就是颜色是一个可区分的特征，distinguishing feature（通常还加入了位置信息）。但是当背景和前景的颜色空间分布重叠时，这种方法的效果就不是很好了。&#xA;2） 当前基于抠图的数据库很小。 the alphamatting.com dataset 只有27张训练图像，8张测试图像。&#xA;本文解决了上述两个问题。针对数据库问题，我们建立了一个大的抠图数据库。建立方式如下： 找一些背景比较单一的图像，这些图像的真值比较容易得到。将人扣出来，然后再将其放到背景比较复杂的图中去。&#xA;4 Our method 整个网络分两个部分，一个是 deep convolutional encoder-decoder network，is penalized by the alpha prediction loss and a novel compositional loss 输入图像块和对应的 trimap，输出 alpha prediction。第二部分是一个小的卷积网络用于 refines 前面个网络的输出 alpha prediction。&#xA;4.1. Matting encoder-decoder stage&#xA;Losses: 我们这里设计了两个 Losses： 第一个loss 是 the alpha-prediction loss，是 预测的 alpha values 和alpha values的真值的绝对差。第二个loss是 the compositional loss ，预测的RGB颜色值和对应的真值绝对差。.</description>
    </item>
    <item>
      <title>图像检索系列一：Deep Learning of Binary Hash Codes for Fast Image Retrieval</title>
      <link>https://anwangtanmi.github.io/posts/d1b35c65fb111d5c9969c067b1d95ca1/</link>
      <pubDate>Wed, 23 Nov 2016 14:44:06 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/d1b35c65fb111d5c9969c067b1d95ca1/</guid>
      <description>Deep Learning of Binary Hash Codes for Fast Image Retrieval 这篇文章发表在2015CVPR workshop&#xA;文章链接：http://www.cv-foundation.org/openaccess/content_cvpr_workshops_2015/W03/papers/Lin_Deep_Learning_of_2015_CVPR_paper.pdf&#xA;代码链接：https://github.com/kevinlin311tw/caffe-cvprw15&#xA;图一 算法框架流程&#xA;这篇文章的想法很巧妙，在一个深层CNN的最后一个全连接层（fc8）和倒数第二个全连接层（fc7）之间加了一层全连接隐层，就是图一中绿色的latent layer （H）。这样一来，既可以得到深层的CNN特征，文中主要用的是fc7的特征，还可以得到二分的哈希编码，即来自H。这个隐层H不仅是对fc7的一个特征概括，而且是一个连接CNN网络的中层特征与高层特征的桥梁。&#xA;1. Domain Adaption&#xA;为了让一个网络能够对某一类物体高鲁棒，即target domain adaption，用一类主题目标数据集来整定(fine-tune)整个网络。fc8的节点数由目标类别数决定，H的节点数在文中有两种尝试：48和128。这两个层在fine-tune时，是随机初始化的，其中H的初始化参考了LSH[1]的方法，即通过随机映射来构造哈希位。通过这样训练，得到的网络能够产生对特定物体的描述子以及对应的哈希编码。&#xA;2. Image Retrieval&#xA;主要提出了一种从粗糙到细致的检索方案（coarse-to-fine）。H层首先被二值化：&#xA;粗糙检索是用H层的二分哈希码，相似性用hamming距离衡量。待检索图像设为I，将I和所有的图像的对应H层编码进行比对后，选择出hamming距离小于一个阈值的m个构成一个池，其中包含了这m个比较相似的图像。&#xA;细致检索则用到的是fc7层的特征，相似性用欧氏距离衡量。距离越小，则越相似。从粗糙检索得到的m个图像池中选出最相似的前k个图像作为最后的检索结果。每两张图128维的H层哈希码距离计算速度是0.113ms，4096维的fc7层特征的距离计算需要109.767ms，因此可见二值化哈希码检索的速度优势。&#xA;3. 实验结果&#xA;作者在MINIST，CIFAR-10，YAHOO-1M三个数据集上做了实验，并且在分类和检索上都做了实验，结果都很不错，特别是在CIFAR-10上图像检索的精度有30%的提升。&#xA;（1）MINIST&#xA;左边第一列是待检索图像，右边是48和128位H层节点分别得到的结果。可以看到检索出的数字都是正确的，并且在这个数据集上48位的效果更好，128位的太高，容易引起过拟合。&#xA;（2）CIFAR-10&#xA;在这个数据集上128位的H层节点比48位的效果更好，比如128检索出更多的马头，而48位的更多的全身的马。&#xA;（3）YAHOO-1M&#xA;作者在这个数据集上比较了只用fc7,只用H和同时用两者（粗糙到细致）的结果，实验结果表明是两者都用的效果更好。&#xA;可以看到如果只用alexnet而不进行fine-tune的话，检索出的结果精度很低。&#xA;4. 总结&#xA;这个方法整篇文章看下来给人的感觉比较工程，全篇讲理论和方法的部分很少，几乎没有什么数学公式，但是效果好，这个最重要。想法很简单，但是很巧妙，值得学习。代码已经开源，准备尝试。&#xA;[1] Gionis A, Indyk P, Motwani R. Similarity search in high dimensions via hashing[C]//VLDB. 1999, 99(6): 518-529.</description>
    </item>
    <item>
      <title>Tor错误解决:DisableNetwork is set. Tor will not make or accept non-control network connections.</title>
      <link>https://anwangtanmi.github.io/posts/33faaa9547f69469622470076af10e77/</link>
      <pubDate>Mon, 27 Jun 2016 15:49:30 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/33faaa9547f69469622470076af10e77/</guid>
      <description>问题 更新了Tor之后，关闭后再次连接遇到问题。Windows x64,用的meek-amazon网桥。 查看日志,有如下描述&#xA;[NOTICE] DisableNetwork is set. Tor will not make or accept non-control network connections. Shutting down all existing connections. 原因 DisableNetwork is set. 意思大概是当前网络的监管和限制太大，Tor的连接被阻塞掉了。 分析得知，很可能是因为当前防火墙或者带有防火墙功能的杀软对网络的监控太大；或者网络管理员的严格网络设置有关系。&#xA;解决方法&#xA;1.暂时关闭当前的网络防火墙或杀软；关闭Tor后再重新启动Tor. 2.如果上条不起作用的话，换用obfs4网桥或直连试试. 3.如果还不行的话，仔细查看Tor的错误日志，考虑其他原因。 我将自己的防火墙暂时关闭，再启动Tor就可以连接了。</description>
    </item>
    <item>
      <title>使用Firefox&#43;Tor&#43;FoxyProxy&#43;Noscript&#43;IETab进行安全自由的网上冲浪</title>
      <link>https://anwangtanmi.github.io/posts/43b0ac769a521fee276687e8e332d9db/</link>
      <pubDate>Sat, 15 Sep 2007 01:51:20 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/43b0ac769a521fee276687e8e332d9db/</guid>
      <description> Firefox这个不多说了，现今自由的后生可畏的第二大浏览器。 下载地址：http://www.mozilla.org.cn/ Tor这个可能有很多网友没听说过，他是一个很牛逼的代理软件：tor的全写是“The Onion Router”，是洋葱路由器的意思。它是一种点对点的代理软件，依靠网络上的众多电脑运行的tor服务来提供代理。tor代理网络是自动连接并随机安排访问链路的，这样就没有了固定的代理服务器，也不需要去费劲寻找代理服务器地址了。而且Tor的代理一般在2-5层左右，加密程度也比较高。 下载地址：http://tor.eff.org/&#xA;阅读全文——共589字 </description>
    </item>
    <item>
      <title>神奇的Tor带你冲浪自由的百科全书Wiki</title>
      <link>https://anwangtanmi.github.io/posts/2c799617e27ac1c96529528664bae967/</link>
      <pubDate>Fri, 16 Jun 2006 13:49:00 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/2c799617e27ac1c96529528664bae967/</guid>
      <description> 很久的时候就听说过&#xA;Wiki（维基百科全书），也在很多的地方看到过Wiki的链接，每次好奇的点击过去，总是无法打开的失望，从此以后头脑中多了一份对于Wiki的牵挂，一份不舍，为什么我就上不去呢？&#xA;最后，我看到了一些关于Tor的介绍，标题起的就很吸引人—–跨越人造的鸿沟：Tor代理服务器。看了之后，大概的有了些印象，下面是wiki上摘录的一些：&#xA;Tor是第二代&#xA;onion routing（洋葱路由）的一种实现，用户通过Tor可以在因特网上进行&#xA;匿名交流。最初该项目由&#xA;美国海军研究实验室（US Naval Research Laboratory）赞助。&#xA;2004年晚些时候，Tor成为&#xA;电子前哨基金会（Electronic Frontier Foundation，&#xA;EFF）的一个项目。2005年后期，EFF不再赞助Tor项目，但他们继续维持Tor的官方网站。&#xA;匿名外连 Tor用户在本机运行一个洋葱代理服务器(onion proxy），这个代理周期性地与其他Tor交流，从而在Tor网络中构成虚拟环路（virtual circuit）。 Tor是在7层protocol stack中的application layer进行加密（也就是按照’onion’的模式）而它之所以被称为onion是因为它的结构就跟洋葱相同，你只能看出它的外表而想要看到核心就必须 把它层层的剥开。即每个router间的传输都经过symmetric key来加密，形成有层次的结构。它中间所经过的各节点，都好像洋葱的一层皮，把客户端包在里面，算是保护信息来源的一种方式，这样在洋葱路由器之间可以 保持通讯安全。同时对于客户端，洋葱代理服务器又作为SOCKS接口。一些应用程序就可以将Tor作为代理服务器，网络通讯就可以通过Tor的虚拟环路来进行。&#xA;进入Tor网络后，加密信息在路由器间传递，最后到达“退出节点”（exit node），明文数据从这个节点直接发往原来的目的地。对于目的主机而言，是从“退出节点”发来信息。&#xA;由于在TCP数据流的级别通讯，Tor显得卓然独立于其他匿名网络。通过使用Tor，一般的应用程序都可以实现匿名，比如IRC、即时通讯，以及浏览网页。浏览网页时，Tor常常与Privoxy联合使用，Privoxy是一个代理服务器，可以在应用层增加保护隐私。&#xA;有了Tor之后，我们就可以自由的上自己想上的网站了，这个要比一般的代理服务器好了很多。我们在&#xA;Tor的官方站点上可以下载，安装后将socket代理设置为localhost:9050，你就可以自由冲浪了。&#xA;Tor的页面中有祥细的&#xA;教程，那里的英文也不是很难，几个简单的步骤就搞定了。而且tor还专门针对firefox有一个torbutton的扩展，可以通过这个扩展来快速的切换是否使用tor。&#xA;不多说了，enjoy it~~~~~~~~~ </description>
    </item>
  </channel>
</rss>
