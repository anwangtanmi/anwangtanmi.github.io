<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>运维 on 暗网探秘</title>
    <link>https://anwangtanmi.github.io/categories/%E8%BF%90%E7%BB%B4/</link>
    <description>Recent content in 运维 on 暗网探秘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 07 Oct 2019 15:55:55 +0800</lastBuildDate>
    <atom:link href="https://anwangtanmi.github.io/categories/%E8%BF%90%E7%BB%B4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>安装Fedora系统和一些系统配置</title>
      <link>https://anwangtanmi.github.io/posts/3fdafd0a72c3a1c489237b22c92a4e9f/</link>
      <pubDate>Mon, 07 Oct 2019 15:55:55 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/3fdafd0a72c3a1c489237b22c92a4e9f/</guid>
      <description>1，在VMware上安装Fedora工作站系统 新建Fedora虚拟机系统，配置好内存、处理器、硬盘、CD、网络配置等参数。&#xA;配置 内容 配置 2GB 处理器 2 硬盘 20GB 网络模式 桥接模式（自动） 系统版本 Fedora-Workstation-Live-x86_64-30-1.2 （1）安装Fedora系统 打开虚拟机进入系统安装界面选择暗安装到硬盘驱动&#xA;之后选择硬盘语言，再点击“安装目的地”按钮，进行硬盘的配置：&#xA;选择已有硬盘之后，点击左下方“完善磁盘摘要以及引导程序”，进行磁盘引导设置：&#xA;选择已有硬盘之后，点击左下方“设为Boot设备”，将磁盘赊着为引导盘：&#xA;选定系统盘后，进行系统安装，安装完成后重启，第一次启动Fedora工作站有限设置用户名和密码，注意这里设置的普通的用户名，管理员用户需要在系统系统启动后进行设置。&#xA;（2）设置用户名和密码 新装Fedora系统后，重启Fedora工作站，首先进入用户名和密码设置页面，在这里设置一个普通用户。&#xA;这里设置全名和用户名分别为：&#xA;全名：Strive to Positive Energy&#xA;用户名：s2pe&#xA;点击“前进”按钮，设置普通用户密码，之后一路点击“前进”按钮可完成Fedora工作站的初始化设置、&#xA;2、Fedora工作站初始化的一些配置 （1）配置管理员用户密码 在”活动“-&amp;gt;”工具“菜单中打开一个命令终端&#xA;在终端中输入命令&#xA;sudo passwd root 输入二次密码长度八位以上的管理员用户密码。&#xA;点击右上角关机图标，注销当前用户，使用管理员账户登录。&#xA;（2）查询系统参数 查看内核版本：&#xA;uname -a 查看测判大小&#xA;fdisk -l | grep Disk 3、软件包管理软件的安装和配置 （1）yum的安装与配置 查询是否安装了yum软件&#xA;rpm -qa | grep yum 可以看到，在Fedora30中，dnf-yum已经取代了yum。&#xA;配置阿里镜像源：&#xA;访问阿里云镜像站选择Fedora系统，按照其步骤进行配置&#xA;（2）apt安装与配置 查询是否安装了apt软件&#xA;rpm -qa | grep apt 显示已安装版本为&#xA;raptor2-2.0.15-18.fc30.x86_64 因为已经配置过yum源文件，此处不用再配置软件源。</description>
    </item>
    <item>
      <title>Err-disabled网络故障分析</title>
      <link>https://anwangtanmi.github.io/posts/a179db8acc7e722023b02ac8319e5c37/</link>
      <pubDate>Wed, 28 Aug 2019 16:15:45 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/a179db8acc7e722023b02ac8319e5c37/</guid>
      <description>[日志信息]&#xA;这两天有两起网络交换机异常警报，在缺省配置下，一旦接口被置为err-disable，IOS将不会试图恢复接口。当端口处于err-disabled状态，将没有任何流量从该端口被传发出去，也将不接收任何进站流量。从交换机外观上看去，端口相对应的LED状态灯也将由正常绿色变为暗黄色或关闭。两起的日志信息分别如下：&#xA;案1：&#xA;# 接口信息&#xA;show int fa1/0/18 br&#xA;FastEthernet1/0/18 is down,line protocol is down (err-disabled)&#xA;# 查看产生err-disabled的原因&#xA;sh int fa1/0/18 status err-disabled&#xA;Port Name Status Reason&#xA;Fa1/0/18 err-disabled bpduguard&#xA;案2：&#xA;# 日志信息&#xA;show logging&#xA;loopback error detected on Gi1/0/46, putting Gi1/0/46 in err-disable state&#xA;[常用命令]&#xA;# 查看接口状态&#xA;show interfaces status&#xA;# 查看触发err-disable的原因&#xA;show interfaces status err-disabled&#xA;# 查询Err-disabled监控事件&#xA;show errdisable detect&#xA;# 查询Err-disabled自动恢复事件&#xA;show errdisable recovery&#xA;# 启动Err-disabled自动恢复事件</description>
    </item>
    <item>
      <title>暗影精灵双系统（win10和Ubuntu16.04）安装&#43;Cuda和tensorflow安装-深度学习环境配置</title>
      <link>https://anwangtanmi.github.io/posts/6fe48123a3b8492c2b3ff10b8d5ac602/</link>
      <pubDate>Sun, 28 Jul 2019 13:27:40 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/6fe48123a3b8492c2b3ff10b8d5ac602/</guid>
      <description>参考教程一：https://blog.csdn.net/qq_42121640/article/details/80635071&#xA;参考教程二：https://blog.csdn.net/zr459927180/article/details/51627910&#xA;参考教程三：https://blog.csdn.net/qq_35976351/article/details/89178917&#xA;1、首先暗影精灵4Plus: （1）F10:设置Bios选项讲legacy模型启用，传统模式启用：Ubuntu的安装选择非UEFI的情况。&#xA;（2）将secure boot关闭。&#xA;（3）F9:来选择安装启动盘。&#xA;2、UltraISO中，将镜像刻盘时：选择： win10：直接刻&#xA;Ubuntu16.04：一定要点击“便捷启动”–“写入新的驱动器引导扇区”-“Syslinux”&#xA;3、先装win10，然后装Ubuntu。 通过EasyBCD选择“添加新条目”，选择Linux/BSD操作系统，在“驱动器”栏目选择/boot的分区。可以通过大小来识别：&#xA;本文重点强调以下几个坑： 第一：此处强调一点：不要像参考教程二中建议的/boot只留200M,不够的，建议1G左右，因为只要有更新不及时清理就会满，到时候安装其他东西都是导致失败。所以建议1G或2G。&#xA;第二：暗影精灵4Plus可以直接装cuda10，所以没必要担心16.04。直接按照参考三，直接装。&#xA;第三：补充安装细节：&#xA;将系统安装在固态盘上，此处电脑固态256G。所以平分两份：128Gwin10,128GUbuntu.&#xA;win10的C盘，新建时会多出来一个500M的预留，导致一个盘只能分成4个主分区，win10占据两个。 Ubuntu新建分区时，按照前两个参考：先建/boot 1到2个G。然后建立swap分区。剩余本人全分给了/。在1T的机械硬盘上新建了一个300G的home。 第四：按照参考三：补充配置环境变量：&#xA;vi ~/.bashrc&#xA;source ~/.bashrc&#xA;nvcc -V&#xA;第五：nvidia-smi.加tensorflow代码测试。</description>
    </item>
    <item>
      <title>企业威胁情报平台建设之暗网监控</title>
      <link>https://anwangtanmi.github.io/posts/570e332107f15bd72d43da31916c3f70/</link>
      <pubDate>Wed, 26 Jun 2019 13:02:08 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/570e332107f15bd72d43da31916c3f70/</guid>
      <description>一、前言&#xA;相信大家对暗网这个概念并不陌生，众所周知，暗网藏着一个暗黑版的交易市场，违法工具、色情交易、毒品交易、枪械信息比比皆是，俨然一个网络犯罪分子聚集的“虎狼之穴”。我们使用Tor浏览器等可以轻松访问暗网中的浅层网，主要是黄赌毒和数据情报信息，如丝绸之路等。&#xA;对于企业而言，往往不免被黑客攻击而被获取大量的数据，而这些数据一般会优先在暗网售卖，如近年来的12306、各大互联网公司等的数据泄露事件。为了及时响应突发的数据泄露事件，企业需要一款实时监控暗网数据泄露的威胁情报平台，用来监控敏感数据泄露、薅羊毛、业务安全风险等事件。&#xA;二、代理服务器搭建&#xA;由于国内网络环境的原因，为了顺利访问暗网，我们需要一台海外服务器，系统版本是ubuntu 18.04(当然其他系统也可以，只是本文会把这个版本的系统作为例子)，同时需要在这台服务器上安装Tor与Privoxy用作访问代理服务器。&#xA;本文的系统版本：&#xA;root@536ef99cab94:/# cat /etc/issue.net Ubuntu 18.04.2 LTS 2.1 整体架构&#xA;从图上可以看到，Privoxy作为一个中转代理，主要是把http协议转socks5协议，而Tor则负责把socks5转Tor协议。所以整个代理访问过程为：&#xA;1.用户输入后缀为onion的地址，由Privoxy暴露的8118端口访问http协议； 2.Privoxy把http协议转发给Tor，Tor获取该网站公钥进行加密，通过Tor通信链路发送信息给Tor节点，由该节点转发请求到.onion网站。 2.2 安装Tor&#xA;可能很多人一开始会直接执行这条命令：sudo apt-get install tor，从这个命令安装的Tor是v2版本的，不支持较新的加密算法，所以导致访问不到某些使用最新加密算法的暗网网址。&#xA;Tor v2到Tor v3的转变主要表现为如下几点：&#xA;1.签名算法从SHA1/DH/RSA1024升级到SHA3/ed25519/curve25519； 2.改进的Tor directory protocol，安全性更高； 3.更好的洋葱地址，换成sha3，可以提高枚举生成一样地址的难度； 4.可拓展的交换协议。 参考官网的安装方法，安装最新版（v3版本）的Tor步骤如下：&#xA;1.在/etc/apt/sources.list添加如下源：&#xA;deb https://deb.torproject.org/torproject.org bionic main deb-src https://deb.torproject.org/torproject.org bionic main 2.添加gpg密钥，执行如下命令：&#xA;curl https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --import gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | apt-key add - 3.安装Tor：&#xA;apt update apt install tor deb.torproject.org-keyring 4.查看安装好Tor的版本，可知本文安装的Tor版本为0.3.5.8：&#xA;root@536ef99cab94:/# tor -v Jun 18 14:30:43.</description>
    </item>
    <item>
      <title>SAP WebIDE编辑器的主题设置</title>
      <link>https://anwangtanmi.github.io/posts/7c56d4c97d3b848d02dba037cad7fecd/</link>
      <pubDate>Tue, 25 Jun 2019 14:53:07 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/7c56d4c97d3b848d02dba037cad7fecd/</guid>
      <description>我的本地Eclipse和sublime Text等编辑器，为了保护视力都设置的是黑色或者豆沙绿的背景，而SAP WebIDE JavaScript编辑器默认的背景色还是纯白色，看久了眼睛很累：&#xA;这个背景色其实也是可以更换的：WebIDE里选择Preferences&#xA;把theme改成Tommorow Night Blue(dark)即可：&#xA;要获取更多Jerry的原创文章，请关注公众号”汪子熙”:</description>
    </item>
    <item>
      <title>Python PIL库处理图片常用操作，图像识别数据增强的方法</title>
      <link>https://anwangtanmi.github.io/posts/abce8af11f1416d23f06936d3112b470/</link>
      <pubDate>Sat, 11 May 2019 13:58:30 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/abce8af11f1416d23f06936d3112b470/</guid>
      <description>在博客AlexNet原理及tensorflow实现训练神经网络的时候，做了数据增强，对图片的处理采用的是PIL(Python Image Library), PIL是Python常用的图像处理库.&#xA;下面对PIL中常用到的操作进行整理：&#xA;1. 改变图片的大小&#xA;from PIL import Image, ImageFont, ImageDraw def image_resize(image, save, size=(100, 100)): &#34;&#34;&#34; :param image: 原图片 :param save: 保存地址 :param size: 大小 :return: &#34;&#34;&#34; image = Image.open(image) # 读取图片 image.convert(&#34;RGB&#34;) re_sized = image.resize(size, Image.BILINEAR) # 双线性法 re_sized.save(save) # 保存图片 return re_sized 2. 对图片进行旋转：&#xA;from PIL import Image, ImageFont, ImageDraw import matplotlib.pyplot as plt def image_rotate(image_path, save_path, angle): &#34;&#34;&#34; 对图像进行一定角度的旋转 :param image_path: 图像路径 :param save_path: 保存路径 :param angle: 旋转角度 :return: &#34;</description>
    </item>
    <item>
      <title>服务器响应时间缓慢的解决方法</title>
      <link>https://anwangtanmi.github.io/posts/c45a6fc303e28a15407732b191ad338c/</link>
      <pubDate>Tue, 02 Apr 2019 11:02:29 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/c45a6fc303e28a15407732b191ad338c/</guid>
      <description>用户在使用服务器一段时间后会发现网站打开速度变慢，如果遇到这种问题，我们可以从服务器的硬件和软件方面来进行升级优化，以提升服务器的性能跟它的整体利用率。下面一起来从这几个方面了解下吧~&#xA;一、使用服务器的Gzip压缩功能&#xA;一般比较大中型的网站内容页面比价多，会造成占用较大的内存，当客户端访问的时候，加载的速度也会受到影响，如果是这类网站，用户可以用服务器的Gzip页面压缩功能，将一个比较大的页面尽量小一些，这样可以减少网络传输的数量，起到客户端访问速度。正常情况下的电脑是可以使用Gzip压缩功能的，而且还可以能够针对JS文件、CSS文件和Html进行压缩，多方面去进行优化网站访问速度。&#xA;二、尽量减少http请求数&#xA;一般情况下从访客访问一个页面到页面完全展现出来，这过程是要耗费一些时间加载各种Scripts、CSS样式表、Flash以及图片的，这过程中只要加载，就会请求一次http，所以这样的次数越多，时间耗费得越多，这样一来，页面的打开时间就越长，那如果是这样的情况，用户可以把CSS跟JS写到页面上，尽量避免外部调用，或者也可以把CSS文件和JS文件分来，在后台再进行合并，这样客户端浏览器相当于一次请求。所以尽量减少http的请求，减少外部各类文件的数量调用次数达到提升访问速度的目的。&#xA;三、升级服务器&#xA;在进行服务器升级工作之前，尽量多方面去考虑，是要升级现有的服务器还是要置换新的服务器设备。随着业务的不断增长，一直在使用的服务器遇到的问题比较多也是正常的。所以针对一些配置进行升级，比如增加硬件设备等，来满足不断在扩大的业务需求。&#xA;至于说要置换的新的服务器，主要是因为可能在建站初期，选择硬件配置相对比较差的，使用到现在已经不能满足网站的发展，那只能选择购置新的服务器。对于硬件优化的部分服务器租用完全可以信赖服务商的工作。选择一家靠谱的服务商对于服务器使用过程中出现的问题进行及时有效的处理是互联网公司的明智选择。对于被攻击目标来说，需要面对不同协议、不同资源的分布式的攻击，分析、响应和处理的成本就会大大增加。对于一般的小型企业来说，通过自己来做到全面的防护不太实际且成本巨大。但是通过服务商部署的全面防护系统、单机硬防和集群防御软硬件给企业带来不一样安全体验。&#xA;希望这些介绍能对您有所帮助</description>
    </item>
    <item>
      <title>牛客网 2018校招真题 招商银行信用卡 小招喵跑步</title>
      <link>https://anwangtanmi.github.io/posts/7ab28d40e951d2176f2b45e303bfc1a6/</link>
      <pubDate>Thu, 24 Jan 2019 13:05:22 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/7ab28d40e951d2176f2b45e303bfc1a6/</guid>
      <description>Description 牛客网 2018校招真题 小招喵跑步&#xA;Solving Ideas 逆向思维，计算从终点到原点需要的最少步数&#xA;当x为偶数时，则x /= 2&#xA;当x为奇数时，如果(x + 1) / 2为偶数，则x++；如果(x – 1) / 2为偶数，则x–；&#xA;特别地，如x &amp;lt;= 3，则x–&#xA;对于任意的x，x属于整数，(x + 1) / 2为偶数 和 (x - 1) / 2为偶数 有且只有一个会成立。&#xA;Time complexity : O&#xA;(&#xA;l&#xA;o&#xA;g&#xA;x&#xA;)&#xA;O(logx)&#xA;O(logx)&#xA;Space complexity : O&#xA;(&#xA;1&#xA;)&#xA;O(1)&#xA;O(1)&#xA;Solution import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; /** * @author wylu */ public class Main { public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.</description>
    </item>
    <item>
      <title>100% 搭建你自己的匿名网站(暗网网站)</title>
      <link>https://anwangtanmi.github.io/posts/d4cfc7d29f3b596007302fa43f93132e/</link>
      <pubDate>Wed, 12 Sep 2018 16:02:15 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/d4cfc7d29f3b596007302fa43f93132e/</guid>
      <description>序言&#xA;前几年一则朋友圈把暗网炒火了…&#xA;其实暗网没那么神秘,就是一种特定的方式的部署与请求而已&#xA;请求方需要使用 tor browser&#xA;响应方 需要使用 tor 的hidden_service&#xA;话不多少,进入搭建阶段&#xA;环境&#xA;系统：一台三十块一个月的香港vps 自带centos7&#xA;所需：Nginx+tor&#xA;更新yum源&#xA;rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm 关闭防火墙 &amp;amp; 禁用&#xA;//临时关闭 systemctl stop firewalld //禁止开机启动 systemctl disable firewalld Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service. Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service. 安装 Nginx&#xA;yum -y install nginx 安装 Tor&#xA;yum -y install tor 配置 Nginx&#xA;vi /etc/nginx/nginx.conf server{ listen 80 default_server; ... } 启动 Nginx&#xA;service nginx restart 配置 tor&#xA;vi /etc/tor/torrc 添加一下两行 HiddenServiceDir /var/lib/tor/hidden_service/ HiddenServicePort 80 服务器IP:8080 启动 tor</description>
    </item>
    <item>
      <title>一次有意思的机房停电小事故</title>
      <link>https://anwangtanmi.github.io/posts/6f5f83bab099719481da1b5e88e0813f/</link>
      <pubDate>Fri, 25 May 2018 08:29:17 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/6f5f83bab099719481da1b5e88e0813f/</guid>
      <description>今天遇到了一次机房断电的事故，幸亏预备措施比较到位加上组织大批人员救急，安然度过了停电的两个小时。&#xA;上午10点多，正在会议室开会，突然窗外嗵的一声响，感觉像是什么爆了，然后会议室灯和大屏幕都暗了下来。这时领导已经意识到可能是全楼断电了，赶紧出门去看，不得不说领导的敏感性那是杠杠的。我们的会议室就在机房外面，不一会儿很多人就出现到机房这边了。&#xA;领导让一方面派人去楼顶几层公司高层领导那里巡查，向他们解释整楼断电我们正在采取措施。另一方面，开始检查机房机器是否都运行正常，并且开始联系发电车。&#xA;整个办公楼都黑漆漆一篇，只有机房里绿灯闪烁。大家打开手机手电筒，小心翼翼的进机房查看。两台UPS，一台剩余392分钟，一台剩余120分钟，听起来很不打错啊。只是几分钟没过，机房的温度开始升了起来，此时机房温度26~28度。服务器有UPS可是机房空调没有UPS呀。大概十几分钟后，处于角落位置的温度已经到了30度。领导开始组织人员联系买冰块，同时打开机房两个大门让空气对流。还有人找来了一大一小两台风扇开始从门口往机房吹。&#xA;大概11点半左右，两车冰块才陆续运抵，艰难的冰桶挑战开始了。各式各样的容器纷纷登场亮相，有从厨房借来的汤桶，又从保洁阿姨借来的垃圾桶和水桶。大家走楼梯把冰桶搬到7楼机房里，放置在温度相对较高的地方。为了防止冰块融化的水不小心流到地上，还在冰桶下面防止了垫子。&#xA;就是这样，在11点40左右，机房有的区域温度已经到了40度，有些机器已经过热重启了。&#xA;待续</description>
    </item>
    <item>
      <title>centos7 离线配置安装nginx</title>
      <link>https://anwangtanmi.github.io/posts/1872d73ee4c1c8c6e022d0338730edf6/</link>
      <pubDate>Thu, 21 Dec 2017 13:40:29 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/1872d73ee4c1c8c6e022d0338730edf6/</guid>
      <description>下载nginx包 tar -zxvf nginx-1.13.7.tar.gz&#xA;cd nginx-1.13.7&#xA;安装 ./configure&#xA;make clean ####清除./configure时产生的临时文件&#xA;可能会报错误 ### the HTTP rewrite module requires the PCRE library. ###显示需要pcre&#xA;rpm -ivh pcre pcre-devle zlib zlib-devle&#xA;./configure&#xA;执行完成会看到&#xA;###&#xA;Configuration summary&#xA;+ using system PCRE library&#xA;+ OpenSSL library is not used&#xA;+ using system zlib library&#xA;nginx path prefix: “/usr/local/nginx”&#xA;nginx binary file: “/usr/local/nginx/sbin/nginx”&#xA;nginx modules path: “/usr/local/nginx/modules”&#xA;nginx configuration prefix: “/usr/local/nginx/conf”&#xA;nginx configuration file: “/usr/local/nginx/conf/nginx.conf”</description>
    </item>
    <item>
      <title>用海康威视摄像头做图像处理问题</title>
      <link>https://anwangtanmi.github.io/posts/c2e9723180fb6709c3503821794ac34c/</link>
      <pubDate>Wed, 02 Aug 2017 08:55:40 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/c2e9723180fb6709c3503821794ac34c/</guid>
      <description> 用海康威视摄像头做图像处理问题 首先自己要激活海康威视摄像机，然后，如果只有摄像机，没有配套的存储设备啥的，就用电脑就好了 在激活摄像机后，在电脑端要去海康威视官网下载4200管理软件，然后配置就好。 之后调用程序访问摄像机拍摄的视频时，需要发邮件给海康威视，让对方发SDK，不然海康威视的视频没法转成RGB的，而opencv里的库函数需要访问的是RGB格式的视频。 注意：有个问题就是，电脑要是能访问海康威视的摄像机，需要将电脑的网关改成和海康威视摄像机的IP(192.168.1.64)网关一样，所以可能会使电脑上不了网，也就是IP冲突，这个时候就需要改电脑连的路由器网关或者是海康威视摄像机的网关。 </description>
    </item>
    <item>
      <title>如何理解持续集成、持续交付、持续部署？</title>
      <link>https://anwangtanmi.github.io/posts/656e88ad8635eacfa9c58fe4d82ced79/</link>
      <pubDate>Fri, 23 Jun 2017 15:41:56 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/656e88ad8635eacfa9c58fe4d82ced79/</guid>
      <description>如何理解持续集成、持续交付、持续部署？&#xA;在学习精益思想的过程中接触到了持续部署这个概念，查了下资料还有持续集成与持续交付。 身为没有技术背景的产品人员，靠自己搜索信息深刻理解这三个概念实在过于痛苦（相反，产品人员对精益是很容易深刻理解且高度认同的，因为越来越明白再好的产品人员、再好的用研意识与方法都无法保证需求的正确性，前期过度的产品设计是浪费的），所以来知乎上求助一下技术达人有没有现成的总结。&#xA;如何分辨与理解这三个概念？&#xA;你所在的技术团队是否认同与实践推广？在实践推广的过程中总结出了什么心得？&#xA;这类概念是否有必要向产品同事、老板普及推广？在普及推广中有过什么事情发生？&#xA;说出来才知道对不对；知道不对才能改进；改进才能成长 集成是指软件个人研发的部分向软件整体部分交付，以便尽早发现个人开发部分的问题；&#xA;部署是代码尽快向可运行的开发/测试节交付，以便尽早测试；&#xA;交付是指研发尽快向客户交付，以便尽早发现生产环境中存在的问题。&#xA;如果说等到所有东西都完成了才向下个环节交付，导致所有的问题只能再最后才爆发出来，解决成本巨大甚至无法解决。&#xA;而所谓的持续，就是说每完成一个完整的部分，就向下个环节交付，发现问题可以马上调整。是的问题不会放大到其他部分和后面的环节。&#xA;这种做法的核心思想在于：既然事实上难以做到事先完全了解完整的、正确的需求，那么就干脆一小块一小块的做，并且加快交付的速度和频率，使得交付物尽早在下个环节得到验证。早发现问题早返工。&#xA;举个例子，你家装修厨房，其中一项是铺地砖，边角地砖要切割大小。如果一次全切割完再铺上去，发现尺寸有误的话浪费和返工时间就大了，不如切一块铺一块。这就是持续集成。&#xA;装修厨房有很多部分，每个部分都有检测手段，如地砖铺完了要测试漏水与否，线路铺完了要通电测试电路通顺，水管装好了也要测试冷水热水。如果全部装完了再测，出现问题可能会互相影响，比如电路不行可能要把地砖给挖开……。那么每完成一部分就测试，这是持续部署。&#xA;全部装修完了，你去验收，发现地砖颜色不合意，水池太小，灶台位置不对，返工吗？所以不如没完成一部分，你就去用一下试用验收，这就是持续交付。&#xA;——————–&#xA;补充：从敏捷思想中提出的这三个观点，还强调一件事：通过技术手段自动化这三个工作。加快交付速度。 最近看了一篇文章 The Product Managers’ Guide to Continuous Delivery and DevOps 文中对「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」和「持续部署（Continuous Deployment）」这三个概念有很详细的解释。这里借用文中的插图，说一下我对这三个概念的理解。&#xA;持续集成&#xA;持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。&#xA;持续交付&#xA;持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（&#xA;production-like environments）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续&#xA;手动部署到生产环境中。&#xA;持续部署&#xA;持续部署则是在持续交付的基础上，把部署到生产环境的过程自动化。&#xA;我个人觉得持续集成、持续交付、持续部署非常值得推广。开发过程中最怕集成时遇到问题导致返工，而持续集成、持续交付、持续部署恰恰可以早发现早解决，从而可以避免这个问题。 即代码的零库存管理，是精益生产的精~精~精~精髓。&#xA;代码越早push出去，用户能越早用到，快就是商业价值； 用户越早用到就越早反馈，团队越早得到反馈，好坏都是有价值的输入； 用户不反馈，说明我们做了用户不想要的东西（通过用例跟踪）或者marketing没做好，能帮助产品市场人员调整策略； 代码库存越是积压，就越得不到生产检验，积压越多，代码间交叉感染的概率越大，下个release的复杂度和风险越高； 代码库存越多，workflow的包袱越重，管理成本越大，说敏捷越可笑。 流水不腐，户枢不蠹。&#xA;职业生涯没有被要求过要区分这三个概念 … 其实应该是四个词：持续集成、持续部署、持续交付、持续发布。&#xA;咱们把这几个词拆解一下：&#xA;持续 (Continuous)：不断的获取反馈，响应反馈。&#xA;集成 (Integration)：编译、测试、打包；&#xA;部署 (Deployment)：应用组件或基本设施的代码或配置变更在产品环境生效称为“部署”；&#xA;发布 (Release)：具有业务影响的功能变化对最终用户可见称为“发布”。&#xA;交付 (Delivery)：可以理解为从 Deployment 到 Release 之间的阶段，更多的强调的是一种能力。开发有能力频繁的部署，业务有能力随时发布。</description>
    </item>
    <item>
      <title>Altium Designer PCB导线高亮</title>
      <link>https://anwangtanmi.github.io/posts/66fb9a7ac3b423a6547e5ec2edf278af/</link>
      <pubDate>Thu, 23 Feb 2017 17:14:06 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/66fb9a7ac3b423a6547e5ec2edf278af/</guid>
      <description>在Altium Designer17中，默认设置PCB导线是不高亮的&#xA;需要再设置中修改 DXP -&amp;gt; Perferences -&amp;gt; PCB Editor -&amp;gt; Board Insight Display&#xA;中取消勾选Live Highlighting only when Shift Key Down(只有Shift按键按下才高亮)&#xA;单击OK保存即可。&#xA;到了AD18中，设置的位置改变为</description>
    </item>
    <item>
      <title>OD各种断点的原理</title>
      <link>https://anwangtanmi.github.io/posts/c3f0bae0ef0697459cc51b12498c19d2/</link>
      <pubDate>Thu, 07 Jul 2016 10:12:22 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/c3f0bae0ef0697459cc51b12498c19d2/</guid>
      <description>（1）int 3断点，即cc断点，这是一种基于软中断机制断点，3为中断号。OD中，当你在代码区某行按F2即可实现，其机理是把所在代码的第一个字节保存到一张表上，然后将其修改为CC，当程序运行到此代码时，就会产生中断，从而转至中断服务程序。当你去除断点时，OD会从表里读取出当前断点原来的字节内容。 （2）内存断点，假如你用int 3断点对数据区下断，OD会提示你断点可能不会实现，其实也是必然，程序不可能执行数据区，然而我们却可以当数据被读取或写入时进行下断，这种原理主要基于内存属性，当下读写断点是，OD会修改断点处读写属性，如果程序对此数据读写的话，会产生读写异常，OD捕捉此异常并分析，其可以知道运行到何处，对代码段也可以下此断点，机理相似。&#xA;（3）硬件断点，这是由硬件实现（这里是CPU实现），其由CPU调试器实现，断点长度有限，其只用两位记录断点长度，所以只支持4个硬件断点，调试寄存器中有3位表示断点状态及属性，000 保留 001 执行断点 010 访问断点 011 写入断点 100 保留 101 临时断点 110 保留 111 保留</description>
    </item>
    <item>
      <title>什么是渗透测试</title>
      <link>https://anwangtanmi.github.io/posts/d9d12030b848b7796de23d0928e9623b/</link>
      <pubDate>Wed, 24 Sep 2014 10:48:27 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/d9d12030b848b7796de23d0928e9623b/</guid>
      <description>渗透测试的分类 作为一种对抗性和定制要求都非常高的服务，渗透测试的完成质量依赖于实施人员即渗透测试者(PenetrationTester, Pentester)的技术能力、专业素养以及团队协作能力。提供渗透测试服务的安全公司或组织都需要由职业化渗透测试者组成的专业团队，这些渗透测试者一般称为渗透测试工程师。&#xA;熟练掌握测试方法、流程与技术，面对复杂渗透场景能够运用自己的创新意识、技术手段与实践经验，从而成功取得良好渗透测试效果的技术专家称为渗透测试师(PenetrationTest Expert)。&#xA;渗透测试的两种基本类型包括:&#xA;黑盒测试:设计为模拟一个对客户组织一无所知的攻击者所进行的渗透攻击。&#xA;白盒测试:渗透测试者在拥有客户组织所有知识的情况下所进行的渗透测试。两种测试方法都拥有他们各自的优势和弱点。&#xA;黑盒测试 黑盒测试(Black-boxTesting)也称为外部测试(ExternalTesting)。采用这种方式时，渗透测试团队将从一个远程网络位置来评估目标网络基础设施，并没有任何目标网络内部拓扑等相关信息，他们完全模拟真实网络环境中的外部入侵者，采用流行的攻击技术与工具，有组织有步骤地对目标组织进行逐步的渗透与入侵，揭示目标网络中一些已知或未知的安全漏洞，并评估这些漏洞能否被利用获取控制权或造成业务资产的损失。&#xA;黑盒测试还可以对目标组织内部安全团队的检测与响应能力做出评估。在测试结束之后，黑盒测试会对发现的目标系统安全漏洞、所识别的安全风险及其业务影响评估等信息进行总结和报告。&#xA;黑盒测试是比较费时费力的，同时需要渗透测试者具备较高的技术能力。在安全业界的渗透测试眼中，黑盒测试通常更受推崇，因为它能更逼真地模拟一次真正的攻击过程。&#xA;白盒测试 白盒测试(White-boxTesting)也称为内部测试(InternalTesting)。进行白盒测试的团队将可以了解到关于目标环境的所有内部与底层知识，因此这可以让渗透测试者以最小的代价发现和验证系统中最严重的安全漏洞。如果实施到位，白盒测试能够比黑盒测试消除更多的目标基础设施环境中的安全漏洞与弱点，从而给客户组织带来更大的价值。&#xA;白盒测试的实施流程与黑盒测试类似，不同之处在于无须进行目标定位与情报收集；此外，白盒测试能够更加方便地在一次常规的开发与部署计划周期中集成，使得能够在早期就消除一些可能存在的安全问题，从而避免被入侵者发现和利用。&#xA;白盒测试中发现和解决安全漏洞所需花费的时间和代价要比黑盒测试少许多。而白盒测试的最大问题在于无法有效地测试客户组织的应急响应程序，也无法判断出他们的安全防护计划对检测特定攻击的效率。如果时间有限或是特定的渗透测试环节(如情报搜集)并不在范围之内，那么白盒测试可能是最好的选项。&#xA;灰盒测试 以上两种渗透测试基本类型的组合可以提供对目标系统更加深入和全面的安全审查，这就是灰盒测试(Grey-boxTesting)，组合之后的好处就是能够根据对目标系统所掌握的有限知识与信息，来选择评估整体安全性的最佳途径。在采用灰盒测试方法的外部渗透场景中，渗透测试者也类似地需要从外部逐步渗透进入目标网络，但他所拥有的目标网络底层拓扑与架构将有助于更好地决策攻击途径与方法，从而达到更好的渗透测试效果。&#xA;渗透测试的方法与流程 要想完成一次质量很高的渗透测试过程，渗透测试团队除了具备高超的实践技术之外，还需要掌握一套完整和正确的渗透测试方法学。&#xA;虽然渗透测试所面临的目标组织网络系统环境和业务模式前边万化，而且过程中需要充分发挥渗透测试者的创新与应变能力，但是渗透测试的流程、步骤与方法还是具有一些共性，并可以用一些标准化的方法体系进行规划和限制。&#xA;目前，安全业界比较流行的开源渗透测试方法体系标准包括以下几个。&#xA;安全测试方法学开源手册 由ISECOM安全与公开方法学研究所定制，最新版本为2010年发布的v3.0。安全测试方法学开源手册(OSSTMM)提供物理安全、人类心理学、数据网络、无线通信媒介和电信通信这五类渠道非常细致的测试用例，同时给出评估安全测试结果的指标标准。&#xA;OSSTMM的特色在于非常注重技术的细节，这使其成为一个具有很好可操作性的方法指南。&#xA;NIST SP 800-42 网络安全测试指南 美国国家标准与技术研究院(NIST)在SP800-42 网络安全测试指南中讨论了渗透测试流程与方法，虽然不及OSSTMM全面，但是它更可能被管理部门所接受。&#xA;OWASP十大Web应用安全威胁项目 针对目前最普遍的Web应用层，为安全测试人员和开发者提供了如何识别与避免这些安全威胁的指南。OWASP十大Web应用安全威胁项目(OWASPTop Ten)只关注具有最高风险的Web领域，而不是一个普适性的渗透测试方法指南。&#xA;Web安全威胁分类标准 与OWASPTop Ten类似，Web应用安全威胁分类标准(WASC-TC)全面地给出目前Web应用领域中的漏洞、攻击与防御措施视图。&#xA;PTES渗透测试执行标准 2010年最新发起的渗透测试过程规范标准项目，核心理念是通过建立起进行渗透测试所要求的基本准则基线，来定义一次真正的渗透测试过程，并得到安全业界的广泛认同。&#xA;通过深入了解这些开放的渗透测试方法标准，将有助于你对渗透测试建立起一个整体的知识与技能体系，所有这些方法标准背后的基本想法就是你的渗透测试过程应该按步骤实施，从而确保更加精确地评价一个系统的安全性。我们无法在这里细致地介绍每一个标准的细节，只是简要地介绍最新的PTES标准中定义的渗透测试过程环节。当你更加深入地了解渗透测试技术之后，可以更进一步去了解这些渗透测试方法体系，并在实际的渗透测试中加以应用。</description>
    </item>
    <item>
      <title>Ubuntu14.04–SUMO–Omnet&#43;&#43;和Veins</title>
      <link>https://anwangtanmi.github.io/posts/6fc37e0c1008bad05b7403736eaba40e/</link>
      <pubDate>Thu, 21 Aug 2014 18:57:49 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/6fc37e0c1008bad05b7403736eaba40e/</guid>
      <description>研究需要，所以安装这些工具。&#xA;按照car2x.org网页tutorial的说明，在Ubuntu环境更理想，但该指南是以windows系统为例说明安装。尝试后会发现，windows环境安装远比Ubuntu环境方便很多。&#xA;言归正传：&#xA;1. 先装好Ubuntu14.04（本人环境win7-64+virtualBox）&#xA;2. 根据Omnet++ 4.4.1 InstallationGuide 之Chapter 5. Ubuntu说明，完成预装模块：&#xA;$ sudo apt-get update&#xA;$ sudo apt-get install build-essential gcc g++ bison flex perl tcl-dev tk-dev blt libxml2-dev zlib1g-dev default-jre doxygen graphviz libwebkitgtk-1.0-0 openmpi-bin libopenmpi-dev libpcap-dev&#xA;3. 不建议在Ubuntu下下载Omnet++4.4.1，觉得速度太慢，建议其他方式下好后在相关目录下解压。&#xA;4. 检查配置：$ ./configure (如果发现异常情况，一定要做补救，比如安装所缺模块，否则会影响后续编译，导致错误）。&#xA;5 . 常见的需要安装的模块：Tcl/Tk （第2步已包括，但不知为何检查时提示没有。参考了–philips_629的博文：“ubuntu安装ns2时tcl/tk的问题”&#xA;6. 安装JRE，参考 了–lindabell的博文“ubuntu怎么安装JRE”进行；&#xA;7. 安装BLT：sudo apt-get install blt，提示安装进行并完成。重新检查./configure，根据提示直到提示需要的都ok：&#xA;8. make成功后，可以直接用omnetpp进入IDE界面（图像界面）。&#xA;9. 安装sumo，也使用./configure 检查配置情况。参考以下博文：“SUMO仿真快速入门系列一：Ubuntu 12.04下安装SUMO”。&#xA;10. PROJ也是需要预装的模块。再次./configure 无差错后进行make。&#xA;11. 正常编译后可以用sumo测试软件是否正常（会有版本提示，如果需要图形界面，则使用sumo-gui）。&#xA;12. 安装veins-3a3。先在选定的文件夹下解压，然后启动Omnetpp，载入project后Build all（具体细节在Car2x 网站上有说明）。</description>
    </item>
    <item>
      <title>修改putty非常暗的注释字体颜色</title>
      <link>https://anwangtanmi.github.io/posts/6888d2200d147777fe7b3eff005bf6b0/</link>
      <pubDate>Sun, 10 Nov 2013 11:58:01 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/6888d2200d147777fe7b3eff005bf6b0/</guid>
      <description>转载自http://m.blog.csdn.net/blog/astrotycoon/9729961 个人很喜欢使用putty，不但小巧，也很喜欢他的默认配色方案。唯一美中不足的就是它的默认注释颜色，很暗淡，大白天有时根本看不清。 上网查了查，终于知道可以通过vim的hi（highlight）命令改变。 以下是vim不同关键字字体颜色修改方法&#xA;修改字符串颜色 hi String ctermfg =darkred&#xA;修改类型颜色 hi Type ctermfg =yellow&#xA;修改数字颜色 hi Number ctermfg =darkblue&#xA;修改常量颜色 hi Constant ctermfg =blue&#xA;修改声明颜色 hi Statement ctermfg =darkyellow&#xA;通过hi Comment ctermfg=blue后就清晰多啦！</description>
    </item>
    <item>
      <title>altium中遇到的一些问题</title>
      <link>https://anwangtanmi.github.io/posts/098050ad3f48560e95bfc5e83ed09279/</link>
      <pubDate>Thu, 28 Feb 2013 20:29:15 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/098050ad3f48560e95bfc5e83ed09279/</guid>
      <description>1. 在原理图界面，编译工程，然后点击design-&amp;gt;nelist for project-&amp;gt; protel生成网表 新建PCB文件，在PCB界面，点击design import changes from XXX,即可生成PCB 在生成过程中如果产生“failed to add class member”的错误，可以通过设置消除 点击project-&amp;gt;project option-&amp;gt;class generation(页面)，如下图所示 去掉5个class的勾，即可，就是所有的Component Classes选项下东西都不选。 2. 每次修改原理图之后都要保存，然后才会在PCB更新的时候有效，PCB更新时应该是自动生成了NetList 3.在绘制某个器件封装时，有时候器件引脚会非常近，已至于出现规则错误，这时候需要修改规则，保证正确通过 例如设置第一个对象为指定器件引脚，第二个对象为器件本身，容限设置成0即可规避错误 4. 在移动某个元器件或者某段走线时，有时候不需要贴靠，这时只需要按住CTRL就能自由移动而不带贴靠了 5、出现Match Manually选项，最后出现Unknown Pin，是因为现在pcb中已经有了那些pin了。可以这样。&#xA;Design—-NelList——Edit Nets 然后删除所有的Nets In Class即可。&#xA;6&#xA;按快捷键 Shift + S 进入单层显示模式， 再按+或-在各层切换，或者按*在顶层和底层切换， 再按 Shift + S 回到原来的复合状态。 7 还要注意这些：芯片不用的输入端口要接地；过孔尽量不要打在焊盘上</description>
    </item>
    <item>
      <title>解决一例监控摄像图像发绿的问题</title>
      <link>https://anwangtanmi.github.io/posts/6dc06c5fbd2bf6673b3db546acf9423f/</link>
      <pubDate>Sun, 22 Aug 2010 18:22:00 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/6dc06c5fbd2bf6673b3db546acf9423f/</guid>
      <description>自己家门口的监控摄像机在我调完镜头焦距之后，画面突然发绿，非常非常绿……&#xA;在采集软件里调整白平衡，效果也是很糟糕。画面看起来比较“正常”的时候，画面就基本成了黑白了。&#xA;回想只是在调整焦距的时候，在断电的情况下用强光手电的最低档照了照CCD，也不至于把CCD烧出问题吧……我觉得CCD这玩意在断电而且又没有镜头的情况下，单纯用强光照一下，不会出什么问题的。&#xA;信号线根本没问题啊，调镜头的时候也没有碰到信号线。&#xA;把信号线直接插电视上看看，还是一片大绿，说明不是采集的问题。&#xA;突然想起来，这个摄像头内置自动白平衡……&#xA;于是断电，再给电，好了……（就是硬复位一下嘛）&#xA;怎么一个垃圾形容得了哦……</description>
    </item>
    <item>
      <title>怎样用AT指令查询本机手机号码</title>
      <link>https://anwangtanmi.github.io/posts/583401cb003acd08d878f3e841aae14f/</link>
      <pubDate>Mon, 12 May 2008 12:11:00 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/583401cb003acd08d878f3e841aae14f/</guid>
      <description> AT+CNUM是向SIM卡查询本机号码的。 但是你必须先把这个号码写到SIM卡里面。 因为无论移动或者联通的SIM卡，买给用户的时候都没有把本机号码写到SIM卡内。 一旦你把本机号码写到了SIM卡内，无论你把这张SIM卡插到那台手机，用AT+CNUM都可以查出本机号码的。 Action command returns the MSISDNs related to the subscriber (this information can be stored in the SIM or in the ME). If subscriber has different MSISDN for different services, each MSISDN is returned in a separate line. MSISDN Buffer Format(See GSM 11.11 subclause10.3.5): Bytes Description Length(bytes) 0-X Alpha Identifier X X+1 Length of BCD number 1 X+2 TON and NPI 1 X+3–X+12 Dialling Number 10 X+13 Capability/Configuration Identifier 1 X+14 Extension1 Record Identifier 1 普通用户的SIM卡必须先把本机号码写入SIM卡内，才能读出来，不然读出来的是空的。 你可以找一张没有写入本机号码的SIM试试，在手机上查看本机号会是空的，如果你把本机号添加进去之后（会写入到SIM卡，一般的手机在查看本机号码的界 面都可以添加本机号码的），你不但可以在你添加本机号码的手机上查看到本机号码，而且你把这张SIM卡插到别的手机上，照样可以查看到本机号码。 把本机号码写进SIM卡后，可以用AT+CNUM来读取本机号码的。 </description>
    </item>
  </channel>
</rss>
