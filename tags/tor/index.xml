<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tor on 暗网探秘</title>
    <link>https://anwangtanmi.github.io/tags/tor/</link>
    <description>Recent content in tor on 暗网探秘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 26 Sep 2019 17:06:41 +0800</lastBuildDate>
    <atom:link href="https://anwangtanmi.github.io/tags/tor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>打开海盗湾（The Pirate Bay）网站的解决方案</title>
      <link>https://anwangtanmi.github.io/posts/ebb47e088b6a8a6a81ad31ce9dd9d5a7/</link>
      <pubDate>Thu, 26 Sep 2019 17:06:41 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/ebb47e088b6a8a6a81ad31ce9dd9d5a7/</guid>
      <description> 基本概念 海盗湾（The Pirate Bay）：海盗湾（The Pirate Bay，缩写：TPB）是一个专门储存、分类及搜寻BT种子的网站，是世界最大的BT种子服务器（BitTorrent tracker），提供的BT种子除了有自由版权的收集外，也有不少被著作人声称拥有版权的音频、视频、电脑应用软件与电子游戏，为网络分享与下载的重镇之一。&#xA;深网（英语：Deep Web，又称、不可见网、隐藏网）：指互联网上那些不能被标准搜索引擎索引的非表面网络内容。 暗网（不可见网，隐藏网）：指那些存储在网络数据库里、但不能通过超链接访问而需要通过动态网页技术访问的资源集合，不属于那些可以被标准搜索引擎索引的表面网络。&#xA;暗网是深网（Deep Web）的一个子集，属于深网的一小部分。&#xA;洋葱头（The Onion Router）：一种软件，是第二代洋葱路由（onion routing）的一种实现，用户通过它可以在因特网上进行匿名交流。 解决方案 由于海盗湾属于暗网网站，经常被和谐掉，并且上去寻找东西需要耐心等待，下面就来说说如何进入：&#xA;第一步：下载洋葱漏油器并安装&#xA;官网：https://www.torproject.org/download/&#xA;第二步：打开洋葱路由进行设置，并找到三个代理地址和端口，进入路由界面&#xA;第三步：安装翻译组件，并设置&#xA;第四步：打开暗网导航，找到海盗湾正确暗网地址（ps:还可以对洋葱路由安全设置以及匿名等进行设置）&#xA;第五步：进入海盗湾网站，进行资源下载&#xA;参考文章 https://blog.csdn.net/weixin_43272781/article/details/101452692&#xA;https://blog.csdn.net/zysgdhf4253/article/details/82775731&#xA;https://www.cnblogs.com/jpfss/p/9591536.html&#xA;点赞 1 收藏 分享 文章举报 STZG 发布了1537 篇原创文章 ·&#xA;获赞 311 ·&#xA;访问量 57万+ 他的留言板 关注 </description>
    </item>
    <item>
      <title>Python爬虫-代理篇-TOR</title>
      <link>https://anwangtanmi.github.io/posts/287f3ff4c76f744f5f4d4bc1e0e52401/</link>
      <pubDate>Mon, 01 Jul 2019 14:49:16 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/287f3ff4c76f744f5f4d4bc1e0e52401/</guid>
      <description>Tor介绍 TOR是全球有名的匿名网络，具有很高的匿名性，简单点说，Tor网络利用流量转发的方式，达到隐藏真实请求端(客户端)的目的，是目前比较受欢迎也比较有名气的的匿名工具。其原理图如下&#xA;由于出口IP随机轮换，且具有很强的匿名性，因此我们可以使用Tor网络作为爬虫代理，用来解决一些网站的IP封禁问题。&#xA;Tor的安装和使用 Tor安装 sudo apt-get install tor&#xA;重启 sudo /etc/init.d/tor restart&#xA;生成密码 tor –hash-password mypassword&#xA;这个操作会生成一个Hash串&#xA;修改配置文件 命令 vim /etc/tor/torrc&#xA;ControlPort 9051 HashedControlPassword 16:872860B76453A77D60CA2BB8C1A7042072093276A3D701AD684053EC4C Python使用Tor Python2 sudo pip install requests&#xA;sudo pip install requesocks&#xA;#!/usr/bin/python #coding:utf-8 import os import requesocks import socks import socket import requests import time import sys reload(sys) sys.setdefaultencoding(&#39;utf-8&#39;) url = &#39;http://api.ipify.org?format=json&#39; def getip_requests(url): print &#34;(+) Sending request with plain requests...&#34; r = requests.get(url) print &#34;</description>
    </item>
    <item>
      <title>tor浏览器安装过程中遇到的问题</title>
      <link>https://anwangtanmi.github.io/posts/44fe270f1328be2a6584ac21f0641b1d/</link>
      <pubDate>Wed, 20 Mar 2019 21:37:51 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/44fe270f1328be2a6584ac21f0641b1d/</guid>
      <description>我在安装过程参考了Tor获得最新网桥ip及设置方法，http://www.mottoin.com/reports/112817.html两篇文章，不过在安装过程中也遇到了一些问题，总结一下。&#xA;一、配置不成功&#xA;一开始我是按照集成的网桥进行连接，如下图的第一个（我们要优先选择集成网桥，如果不行的话，才会选择自定义网桥），我把所有的传输方式都试了也不行，于是我选择了第二个，自定义的网桥直接去https://bridges.torproject.org/bridges这个网址里复制就行，全部复制之后粘贴上去就行。我试了很多次，但都不成功，所以我选择了另一种。另一种获取网桥的方式是发送电子邮件至 [email protected]。注意：必须使用电子邮箱发送请求：Riseup、Gmail 或 Yahoo。邮件内容是get bridges 的邮件，主题随意。几分钟之后，对方发来回复中，一次有3组tor代理地址和端口。我试了邮件给我的网桥，很快就好。&#xA;二、自定义网桥复制的时候，需要全部复制，不要只复制前面的套接字，后面一串也需要</description>
    </item>
    <item>
      <title>剥开洋葱皮， 深度揭密Tor网络（没有真正的隐匿）</title>
      <link>https://anwangtanmi.github.io/posts/afd33a466cc7246efa87c8dea71ad661/</link>
      <pubDate>Fri, 16 Nov 2018 10:22:48 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/afd33a466cc7246efa87c8dea71ad661/</guid>
      <description>文章来自IT经理网&#xA;原文链接：https://www.ctocio.com/ccnews/16089.html​​​​​​​&#xA;不久前， 著名黑客Jacob Appelhaum与另外两名安全研究人员在德国媒体上发表了一篇文章， 通过他们得到的NSA的秘密文件以及对源代码的分析， 他们认为， NSA 已经把目标瞄准了匿名网络Tor， 并且可能已经攻破了Tor.&#xA;这个发现令人震惊， 在过去的十几年来， Tor一直被认为是能够保护那些记者， 异见人士， 或者黑客的重要匿名工具。 Tor还被电子前线基金（EFF）推荐为保护个人隐私的推荐工具。 然而， 这次的分析表明， 使用Tor的个人可以被NSA甄别出来， 通过Tor传递的所有数据都可以被记录。&#xA;对于很多人来说， NSA对Tor的渗透攻击就像是对隐私保护和言论自由等人权的法西斯式的践踏。 Appelhaum作为维基解密的志愿者以及一个Tor的开发者， 认为对Tor来说， 志愿者的行为是一种英雄主义行为， 就好像国际志愿军去西班牙与弗朗哥作战一样。&#xA;这听上去很美， 一批国际主义战士与邪恶的美帝国主义在作斗争， 但是， 事实上， Tor社区并不如想象的那么的完美。&#xA;来看看基本事实吧。 Tor是由美国军方的情报机构最初开发并且提供财务支持的。 Tor的最初目的和当前的目的是： “帮助政府情报人员和他们的线人隐藏身份， 以便于他们开展情报收集， 并且把情报回传给情报机构。”这些事实那些鼓吹和倡导使用Tor的人士并不会提到。&#xA;Tor的图标是一个洋葱， 如果我们剥开洋葱皮， 就会看到， 每个Tor的开发人员都是由五角大楼或者其它美国情报机构资助的。 其中包括了Tor的主要开发人员Roger Dingledine， 他甚至还在NSA干过。 如果你去Tor的网站， 你就会发现， Tor依然被美国政府广泛地使用着。 比如在Tor网站上， 你会看到。&#xA;“美国海军的一个机构利用Tor进行开源情报收集， 其中一个小队在最近派遣到中东执行任务时就使用了Tor. 执法机构使用Tor访问或者监控网站， 从而可以在网站日志中留下政府的IP地址。 “&#xA;Tor的发展历史&#xA;我们可以简单回顾一下Tor的发展历史。 1995年， 美国海军研究实验室的科学家开始开发一种匿名即使， 可以避免人们的行迹在Internet上被追踪到。 他们把这个技术叫做“洋葱路由”。 “洋葱路由”利用P2P网络， 把网络流量随机的通过P2P的节点进行转发， 这样可以掩盖源地址与目标地址的路径。 使得在Internet上难以确定使用者的身份和地址。 这就好像你送一封匿名信， 不是自己送或者通过邮差送， 而是大街上随便找一个不认识的人让他帮你送。 这样收信方就很难往回找到你。&#xA;这个技术最初由美国海军研究办公室和国防部高级研究项目署（DARPA）资助。 早期的开发由Paul Syverson, Michael Reed 和David Goldschla领导。 这三个人都是供职美国军方的数学家和计算机系统研究人员。</description>
    </item>
    <item>
      <title>100% 搭建你自己的匿名网站(暗网网站)</title>
      <link>https://anwangtanmi.github.io/posts/d4cfc7d29f3b596007302fa43f93132e/</link>
      <pubDate>Wed, 12 Sep 2018 16:02:15 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/d4cfc7d29f3b596007302fa43f93132e/</guid>
      <description>序言&#xA;前几年一则朋友圈把暗网炒火了…&#xA;其实暗网没那么神秘,就是一种特定的方式的部署与请求而已&#xA;请求方需要使用 tor browser&#xA;响应方 需要使用 tor 的hidden_service&#xA;话不多少,进入搭建阶段&#xA;环境&#xA;系统：一台三十块一个月的香港vps 自带centos7&#xA;所需：Nginx+tor&#xA;更新yum源&#xA;rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm 关闭防火墙 &amp;amp; 禁用&#xA;//临时关闭 systemctl stop firewalld //禁止开机启动 systemctl disable firewalld Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service. Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service. 安装 Nginx&#xA;yum -y install nginx 安装 Tor&#xA;yum -y install tor 配置 Nginx&#xA;vi /etc/nginx/nginx.conf server{ listen 80 default_server; ... } 启动 Nginx&#xA;service nginx restart 配置 tor&#xA;vi /etc/tor/torrc 添加一下两行 HiddenServiceDir /var/lib/tor/hidden_service/ HiddenServicePort 80 服务器IP:8080 启动 tor</description>
    </item>
    <item>
      <title>Tor 网桥获取 deep web</title>
      <link>https://anwangtanmi.github.io/posts/67bd02948c5684d8080e6aa59eb8335c/</link>
      <pubDate>Thu, 02 Aug 2018 15:19:36 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/67bd02948c5684d8080e6aa59eb8335c/</guid>
      <description>[ 访问网桥帮助文档]（https://tb-manual.torproject.org/en-US/bridges.html ） – [ 在线获取]（https://bridges.torproject.org/ ） -通过Gmail发送电子至邮件 [email protected]的&#xA;参考：&#xA;1.Deep Web&#xA;2.暗网导航</description>
    </item>
    <item>
      <title>TOR源码阅读（二）</title>
      <link>https://anwangtanmi.github.io/posts/3fa1744a9f4e00e7b9c737ff3887f4bc/</link>
      <pubDate>Mon, 26 Mar 2018 19:35:03 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/3fa1744a9f4e00e7b9c737ff3887f4bc/</guid>
      <description>今天阅读的内容是一段时间浏览后觉得有必要详细理解的部分，这里由于项目原因不进行具体的技术和语法等等分析，只做功能逻辑分析。&#xA;line 1008 in file main.c&#xA;run_connection_housekeeping（int i,time_t now） 函数，用于长期的单个连接上的持久性任务，被run_scheduled_ecents()每秒钟周期性调用。&#xA;我们来看它做了什么 获取第i个连接，获取当前配置选项结构体，判断当前时间是否超过连接生存周期，查看连接输出缓冲区是否已为空，若为空则进行标记，若连接标记为关闭，结束当前函数。&#xA;{ cell_t cell; connection_t *conn =&#xA;smartlist_get(connection_array, i); const&#xA;or_options_t *options =&#xA;get_options(); or_connection_t *or_conn; channel_t *chan =&#xA;NULL; int have_any_circuits; int past_keepalive = now &amp;gt;= conn-&amp;gt;&#xA;timestamp_lastwritten + options-&amp;gt;&#xA;KeepalivePeriod; if (conn-&amp;gt;&#xA;outbuf &amp;amp;&amp;amp; !&#xA;connection_get_outbuf_len(conn) &amp;amp;&amp;amp; conn-&amp;gt;&#xA;type == CONN_TYPE_OR) TO_OR_CONN(conn)-&amp;gt;&#xA;timestamp_lastempty = now; if (conn-&amp;gt;&#xA;marked_for_close) { /* nothing to do here */ return; } 。若连接类型为目录连接，连接活动超时（如果是服务器则为发送，如果为客户端则为接收），打印日志。判断连接目的是否为获取服务器的文件描述符，且读入缓冲已大于1024字节，若是则该连接已满，若不是，则标记连接为已关闭。若连接既非目录连接也非OR连接，则退出函数。</description>
    </item>
    <item>
      <title>洋葱网络 Tor</title>
      <link>https://anwangtanmi.github.io/posts/ab2c32911648926717bc20719330c500/</link>
      <pubDate>Sat, 02 Dec 2017 09:00:44 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/ab2c32911648926717bc20719330c500/</guid>
      <description>目录 1. 简介 2. 部署 3. 测试代码 1. 简介 洋葱网络是一种匿名通信技术，保护消息发送者和接受者的隐私，隐藏数据报文通过网络时所经过的路线。经过多层加密的通信数据在由若干个被称为洋葱路由器组成的通信通道上传输，每个洋葱路由器去掉一个加密层，以得到下一条路由信息，然后将数据发往下一个洋葱路由器，不断重复，直到数据到达目的地。该机制可以防止参与数据传输的路由节点获知消息发送者/接受者信息或者窃取数据包正文。&#xA;Tor 是一个占主导地位的对洋葱网络的实现，官网 https://www.torproject.org/。&#xA;2. 部署 可以通过 Ubuntu 软件包管理器直接下载安装，命令为 sudo apt-get install tor。&#xA;Tor 配置文件路径为 /etc/tor/torrc，主要配置内容如下：&#xA;ControlPort 控制程序访问的端口&#xA;SocksPort (Default: 9050) 应用程序连接端口&#xA;NewCircuitPeriod NUM (Default: 30 seconds) 尝试新建链路的时间间隔&#xA;MaxCircuitDirtiness NUM (Default: 10 minutes) 链路有效时间，超出视为链路老化&#xA;KeepalivePeriod NUM (Default: 5 minutes) 连接维护时间间隔，保证有效连接的存在和无效连接的删除&#xA;配置示例如下：&#xA;ControlPort 9051 NewCircuitPeriod 10 MaxCircuitDirtiness 10 KeepalivePeriod 1 运行命令 sudo /etc/init.d/tor restart 启动洋葱网络。&#xA;3. 测试代码 import os import requests import requesocks import itertools import time url = &#39;http://api.</description>
    </item>
    <item>
      <title>(二)暗网信息爬取（python）</title>
      <link>https://anwangtanmi.github.io/posts/0c3bf4459264696f818771834147ebd3/</link>
      <pubDate>Wed, 24 May 2017 22:25:19 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/0c3bf4459264696f818771834147ebd3/</guid>
      <description>首先要感谢舍友大佬提供的ShadowsocksR以及相应配置。感谢在本阶段帮助过我的学长学姐，谢谢。&#xA;暗网（深网，不可见网，隐藏网）是指那些储存在网络数据库里、不能通过超链接访问而需要通过动态网页技术访问的资源集合，不属于那些可以被标准搜索引擎索引的表面网络。 动态网页的url不固定，但可以被爬虫爬取，这是第一个点。 由于相关法律风险，本暗网爬虫代码不开源，但我会将我所理解的核心内容记录。 代码环境为ubuntu，使用语言python，使用库urllib2，socks, socket。 这里不用requests库，在参考许多教程如https://github.com/kennethreitz/requests/issues/3863/ 后发现，requests似乎无法使用socks5的代理端口，遂弃之 进入暗网的“门”为TorBrowser或者Tor 注意：torbrowser和tor并非一个东西，torbrowser是基于火狐浏览器的洋葱浏览器，通常用来做暗网入口，而且一般情况下已经足够了，但由于需要代码环境，我使用了纯Tor 以下是我的搭建步骤： 一，安装配置Tor 在ubuntu命令行输入&#xA;sudo apt-get install tor /etc/init.d/tor restart 启动后socks监听9050端口。&#xA;tor --hash-password mypassword 用来输入你的密码 编辑/etc/tor/torrc 在其中加上&#xA;ControlPort 9051 RunAsDaemon 1 Socks5Proxy 127.0.0.1:1080 HashedControlPassword 16:872860B76453A77D60CA2BB8C1A7042072093276A3D701AD684053EC4C 让ControlPort监听9051端口，后边那个16:开头的hash就是上一步得到的。Socks5Proxy是可以使shadowsocks为tor的前端代理（我使用的shadowsocks的端口为1080） 最后重启tor&#xA;/etc/init.d/tor restart （经过曲折的一番探索，可以基本断定，python的stem库控制tor，并不是控制tor浏览器，而是可以利用tor作为自己的匿名代理，或者监视tor的流量走向。stem库目测不能为暗网爬虫做出什么贡献）&#xA;二，设置前端代理shadowsocks 这一段本应该放在最前面，但由于本人的shadowsocks完全依靠了舍友的鼎力帮助，这一段还需要往后自己探索。 就本人理解，shadowsocks作为前端代理最主要的功能就是翻墙。。。 对外提供端口为1080。&#xA;三，利用Tor的9050端口爬取暗网。 使用urllib2库，socks库作为socks5代理，示例代码如下：&#xA;import socket import socks import urllib2 ipcheck_url = &#39;http://checkip.amazonaws.com/&#39; # Actual IP. print(urllib2.urlopen(ipcheck_url).read()) # Tor IP. socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, &#39;127.0.0.1&#39;, 9050) socket.socket = socks.socksocket print(urllib2.urlopen(ipcheck_url).read() 该代码引用自https://stackoverflow.com/questions/1096379/how-to-make-urllib2-requests-through-tor-in-python</description>
    </item>
    <item>
      <title>如何在linux环境下搭建Tor代理服务器</title>
      <link>https://anwangtanmi.github.io/posts/a779e4aa38b44aba1de19cd584034754/</link>
      <pubDate>Wed, 03 May 2017 15:33:42 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/a779e4aa38b44aba1de19cd584034754/</guid>
      <description>如何在linux环境下搭建Tor代理服务器 一、简介 首先， Tor官方提供已不再提供单独的Tor内核下载，只提供集成了Tor内核的Tor-Browser下载。Tor Browser 内置了Tor，firefox，配置工具等，使用方便，但是安装和启动需要依赖GUI图形界面，在Windows或者Mac系统上推荐安装Tor-Browser，会简便很多。如果Linux上没有安装图形界面系统，如代理服务器VPS等，是无法安装Tor-Browser的，这个情况下可以通过安装Tor内核软件的方式实现TOR代理功能。&#xA;Tor Browser的安装和使用已经在另一个文档Tor工具使用手册中详细介绍，这里主要介绍在没有图形界面的Linux服务器上安装Tor内核实现Tor代理功能。&#xA;二、安装 以下的安装在是centos6.5_64x系统上进行的。 centos系统默认yum源是找不到tor安装包的，若yum install tor提示未找到安装包，需要添加epel yum外部源。EPEL (Extra Packages for Enterprise Linux) 是Fedora小组维护的一个软件仓库项目，为RHEL/CentOS提供他们默认不提供的软件包。这个源兼容RHEL及像CentOS和Scientific Linux这样的衍生版本。&#xA;安装步骤如下： yum install tor 若是提示未找到tor安装包，查看 /etc/yum.repos.d/下是否有epel.repo文件，若没有，说明系统未添加epel yum外部源，需要手动添加，若已经添加epel外部源，可直接安装tor，则跳过2-6步骤。 根据你的操作系统，从网站获取对应的epel 的安装包，centos6.5_64位系统获取的安装包如下 （查看系统版本指令lsb_release -a &amp;amp;&amp;amp; uname -a）wget http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm sudo rpm -ivh epel-release-6-5.noarch.rpm 安装成功后可看到 /etc/yum.repos.d/目录下多了epel.repo 与epel-testing.repo文件 yum clean all yum makecache yum install tor 三、启动 安装Tor成功之后，就可以启动Tor了。需要注意的是Tor必须以非root用户启动，否则会启动失败。可以新建一个用户或使用已经存在的其他用户。新建用户操作可参考如下&#xA;useradd admin -d /home/admin passwd admin chown -R admin:admin /home/admin chown -R admin:admin /var/run/tor 切换到用户admin运行Tor，成功运行Tor会显示以下打印 Feb 16 06:33:41.</description>
    </item>
    <item>
      <title>关于tor浏览器的使用和配置</title>
      <link>https://anwangtanmi.github.io/posts/87f24c3b71d617faf8a78cf28c84c8eb/</link>
      <pubDate>Sun, 01 Jan 2017 21:37:56 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/87f24c3b71d617faf8a78cf28c84c8eb/</guid>
      <description> 1.在翻墙的时候接触了deepweb和darkweb的概念.便对这充满邪恶的蛮荒之地非常感兴趣.&#xA;本人用校园网.&#xA;宿舍网络就不用想了,&#xA;图书馆的网络快,但是针对国内网站,而且来你的人太多,一平均,就尴尬了.&#xA;2.正好今天校园网的网费欠费了,离放假也不远了,就不想充网费了.于是买了一天的CMCC,EDU也可以&#xA;在上网的时候,突然想起了代理的事情,于是果断打开之前的安装包,安装&#xA;3.打开配置, ISP选择是,&#xA;网桥选择亚马逊(到后面可以改)&#xA;本地代理选择否&#xA;链接就可&#xA;4. 成功后显示如下页面&#xA;5&#xA;点击测试&#xA;需要改网桥的话,&#xA;点击洋葱的图标,会出现 tor配置,然后把自己的网桥添加进去就好了&#xA;点赞 收藏 分享 文章举报 BlackJed 发布了22 篇原创文章 ·&#xA;获赞 0 ·&#xA;访问量 6万+ 私信 关注 </description>
    </item>
    <item>
      <title>深网与暗网初学者指南</title>
      <link>https://anwangtanmi.github.io/posts/34ece266f3de7ed5b74e7a9f4c0749a2/</link>
      <pubDate>Sat, 10 Sep 2016 00:02:43 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/34ece266f3de7ed5b74e7a9f4c0749a2/</guid>
      <description>访问深网的工具：&#xA;FreeLunch（免费午餐）&#xA;使用这个工具可以访问到经济学、人口学和金融方面的数据，普通搜索引擎的爬虫无法爬到的内容。&#xA;Shodan&#xA;这个搜索引擎在安全圈已经任人皆知了，有人叫它“撒丹”，也有人戏称之为“傻蛋”。不管叫什么，它搜索的内容是物联网社备。如包括摄像头、路由器等智能家居，还有一些工控系统等。国内类似的一个搜索引擎就是ZoomEye，但后者全面些，还可搜索网站组件。&#xA;探索暗网&#xA;如何搜索暗网呢？下面是一些基于Tor网络的搜索引擎：&#xA;Ahmia.fi&#xA;这是一个基础的Tor隐藏服务搜索引擎，内容不是很庞大，但做为暗网之旅的开始还是不错的选择。&#xA;普通URL: https://ahmia.fi&#xA;暗网URL： msydqjihosw2fsu3.onion&#xA;Torch（火炬）&#xA;这是最好的Tor网络搜索引擎，有着巨大的数据库，约110万个页面。&#xA;暗网URL： http://xmh5752oemp2sztk.onion&#xA;Grams&#xA;这个引擎是专门设计用来搜索暗网的，堪称暗网中的谷歌。&#xA;暗网URL： http://grams72tru2gdpl2.onion&#xA;Not Evil（不做恶）&#xA;这是个简易搜索引擎，但，没有广告。&#xA;暗网URL：http://hss3uro2hsxfogfq.onion&#xA;Sinbad Search（辛巴达搜索）&#xA;另一个拥有大型数据库的Tor搜索引擎。&#xA;暗网URL：http://sinbad66644fr5lq.onion&#xA;另一个暗网&#xA;上面介绍了Tor网络的访问，下面我们介绍一下另一张暗网，I2P。&#xA;1. 下载I2P&#xA;https://geti2p.net/en/download&#xA;2. 安装后并启动程序，即可看到I2P的路由控制台( Router Console )：&#xA;然后你必须把浏览器设置成使用I2P，以Firefox为例：&#xA;打开浏览器–&amp;gt;菜单–&amp;gt;选项–&amp;gt;高级–&amp;gt;网络–&amp;gt;设置&#xA;在连接设置窗口选择，“手动代理配置”：&#xA;HTTP Proxy 栏中填入127.0.0.1，端口填4444；&#xA;SSL Proxy 栏中填入127.0.0.1，端口填4445；&#xA;No Proxy for 框中填入“localhost 127.0.0.1”。&#xA;FTP代理设置相同。&#xA;3. 确定&#xA;4. 转到控制台（Router console）点击你想访问的隐藏服务，如果发生错误就点击另一个。&#xA;这里是一些使用I2P网络的搜索引擎：&#xA;Direct（导向）&#xA;这是一个简易界面的搜索引擎，但它主面上显示的活动主机列表很有帮助。&#xA;URL: http://direct.i2p&#xA;BTDigg&#xA;这是一个搜索免费BT种子的搜索引擎，可以找到各种内容的torrent链接。&#xA;URL: http://btdigg.i2p</description>
    </item>
    <item>
      <title>Tor错误解决:DisableNetwork is set. Tor will not make or accept non-control network connections.</title>
      <link>https://anwangtanmi.github.io/posts/33faaa9547f69469622470076af10e77/</link>
      <pubDate>Mon, 27 Jun 2016 15:49:30 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/33faaa9547f69469622470076af10e77/</guid>
      <description>问题 更新了Tor之后，关闭后再次连接遇到问题。Windows x64,用的meek-amazon网桥。 查看日志,有如下描述&#xA;[NOTICE] DisableNetwork is set. Tor will not make or accept non-control network connections. Shutting down all existing connections. 原因 DisableNetwork is set. 意思大概是当前网络的监管和限制太大，Tor的连接被阻塞掉了。 分析得知，很可能是因为当前防火墙或者带有防火墙功能的杀软对网络的监控太大；或者网络管理员的严格网络设置有关系。&#xA;解决方法&#xA;1.暂时关闭当前的网络防火墙或杀软；关闭Tor后再重新启动Tor. 2.如果上条不起作用的话，换用obfs4网桥或直连试试. 3.如果还不行的话，仔细查看Tor的错误日志，考虑其他原因。 我将自己的防火墙暂时关闭，再启动Tor就可以连接了。</description>
    </item>
    <item>
      <title>真正的匿名上网——Tor浏览器</title>
      <link>https://anwangtanmi.github.io/posts/40a151e4851d15058e94bb72ec65b85c/</link>
      <pubDate>Sun, 20 Mar 2016 13:45:05 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/40a151e4851d15058e94bb72ec65b85c/</guid>
      <description>这几天在网上浏览的时候发现了一个厉害的浏览器——Tor浏览器&#xA;真正意义上的匿名浏览，让你在浏览任何网页的时候保护你的IP地址安全。&#xA;因为某些原因，中国本地的IP是无法通过Tor浏览器上网，因此在介绍Tor浏览器之前，我们必须要先将自己的IP地址改变，可以参考这篇博客shadowscoks科学上网&#xA;在自己的电脑可以科学上网的基础上，我们就可以来实现自己IP的隐藏技术了。&#xA;这里我的测试环境是Ubuntu15.10&#xA;第一步：&#xA;输入：&#xA;sudo add-apt-repository ppa:webupd8team/tor-browser 设置ppa&#xA;sudo apt-get update&#xA;sudo apt-get install tor-browser 通过上面简单的几步就可以将我们的Tor浏览器安装完成&#xA;第二步：&#xA;通过桌面左上角的搜索软件，搜索tor，然后打开进行浏览器配置&#xA;第一个窗口：选择configure&#xA;第二个窗口：选择yes&#xA;第三个窗口：无需选择改变，直接下一步&#xA;第四个窗口：选择yes&#xA;第五个窗口：如图设置&#xA;之后就直接选择connect，进行链接就可以了&#xA;稍微等一会儿就会自动跳入到Tor浏览器&#xA;之后，可以输入网址：ip.cn 来查看自己的ip地址，可以发现并不是自己原来的地址了</description>
    </item>
    <item>
      <title>Tor源码分析十 — 连接和链路</title>
      <link>https://anwangtanmi.github.io/posts/b4625b290a2fd620f10686ef483485a8/</link>
      <pubDate>Fri, 21 Jun 2013 22:01:00 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/b4625b290a2fd620f10686ef483485a8/</guid>
      <description>源码分析到这个部分，为了让大家明白源码中的编码逻辑，不得不开始从头梳理程序内部的复杂连接和链接组织形式。否则大家后期会更加一头雾水。笔者开始分析源码之时，没有这些宏观的概念，只能死嚼代码，硬猜硬想，再加以检查代码进行验证，才得以明白程序的主要框架逻辑。如果再以猜测验证的模式向大家讲述源码，必定会越来越混乱。所以，在本节之中，我们会将系统中所有的连接类型，链路类型和他们之间的关系和代码之中的关联方式尽量讲明。若大家遇到不明晰的部分，可以参照代码进行查阅。&#xA;在我们进行详细分析之前，先再次给出连接和链接的框架位置图。这个简单的层次图帮助我们理解不同连接和链接所处层次的位置关系，其实已经在我们分析OR连接源码之时给出，之时当时没有进行过多的深入介绍。&#xA;DIR连接，LISTENER连接　|&#xA;－－－－－－－－－－－－－－－－－　|&#xA;AP连接，EXIT连接……　Tor协议上层 |&#xA;－－－－－－－－－－－－－－－－－－－－－－－－－－－－ |　应用层&#xA;Circuit链路……　Tor协议中层 |&#xA;－－－－－－－－－－－－－－－－－－－－－－－－－－－－ |&#xA;OR连接……　Tor协议下层 |&#xA;－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－&#xA;TLS连接　传输层&#xA;1. 连接 很明显，系统中的连接类型多种多样，各有各自的不同职能。在此处，我们先罗列出所有系统中存在的连接，其后再对一些我们比较重视的连接类型进行相关说明。&#xA;//OR监听连接：本地用于监听远端传来的OR请求，为每个新请求建立一个OR连接；OR监听连接本地全局只有一个； #define CONN_TYPE_OR_LISTENER 3 //OR连接：基于TLS连接的，主要负责Tor系统内主机之间相互通信的连接；OR连接数量表征本地与多少台主机建立了互联关系，因为他们是一一对应的； #define CONN_TYPE_OR 4 //EXIT连接：翻译为出口连接是因为该连接会与远端服务器建立socket连接并传递数据； #define CONN_TYPE_EXIT 5 //AP监听连接：本地用于监听本地应用程序的服务请求而设立的监听连接，为每个服务请求建立一个AP连接；AP监听连接本地全局只有一个； #define CONN_TYPE_AP_LISTENER 6 //AP连接：基于链路的，主要负责为客户端请求寻找合适链路和传递数据；AP连接数量表征本地应用程序发出的连接请求数量，因为他们是一一对应的； #define CONN_TYPE_AP 7 //DIR监听连接：Tor系统目录服务器用于监听Tor系统内主机发出的目录相关请求，也就是说该类型连接只在目录服务器上存在； #define CONN_TYPE_DIR_LISTENER 8 //DIR连接：Tor客户端向Tor目录服务器发送目录请求时需要新建的连接，该连接需要通过AP连接为其转发请求，也就是说类似于普通应用程序的请求连接； #define CONN_TYPE_DIR 9 //CPUWORKER连接：用于在程序开启多进程解密服务的时候提供进程间通信，详细过程可以参看前面分析过的cpuworker部分文章；正常情况下未被使用； #define CONN_TYPE_CPUWORKER 10 //CONTROL监听连接：本地用于监听本地应用程序传递的控制指令或请求；（后期专门讲述，此处暂略） #define CONN_TYPE_CONTROL_LISTENER 11 //CONTROL连接：本地用于控制消息处理的连接；（后期专门讲述，此处暂略） #define CONN_TYPE_CONTROL 12 //以下三种连接由于非常少见，此处我们暂时略去； #define CONN_TYPE_AP_TRANS_LISTENER 13 #define CONN_TYPE_AP_NATD_LISTENER 14 #define CONN_TYPE_AP_DNS_LISTENER 15 很明显地，通过分析上面这些连接类型我们发现，对于客户端而言，最重要的连接类型无非就是DIR,AP,OR三种连接。这些连接之间的相互关联和作用帮助客户端应用程序将应用请求送入Tor系统，并再通过Tor系统的封装等操作将数据成功送出到远端目的地。下面我们来简要描述下整个系统运转的过程。 1.</description>
    </item>
  </channel>
</rss>
