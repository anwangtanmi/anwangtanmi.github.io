<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>代理服务器 on 暗网探秘</title>
    <link>https://anwangtanmi.github.io/tags/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
    <description>Recent content in 代理服务器 on 暗网探秘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 03 May 2017 15:33:42 +0800</lastBuildDate>
    <atom:link href="https://anwangtanmi.github.io/tags/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何在linux环境下搭建Tor代理服务器</title>
      <link>https://anwangtanmi.github.io/posts/a779e4aa38b44aba1de19cd584034754/</link>
      <pubDate>Wed, 03 May 2017 15:33:42 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/a779e4aa38b44aba1de19cd584034754/</guid>
      <description>如何在linux环境下搭建Tor代理服务器 一、简介 首先， Tor官方提供已不再提供单独的Tor内核下载，只提供集成了Tor内核的Tor-Browser下载。Tor Browser 内置了Tor，firefox，配置工具等，使用方便，但是安装和启动需要依赖GUI图形界面，在Windows或者Mac系统上推荐安装Tor-Browser，会简便很多。如果Linux上没有安装图形界面系统，如代理服务器VPS等，是无法安装Tor-Browser的，这个情况下可以通过安装Tor内核软件的方式实现TOR代理功能。&#xA;Tor Browser的安装和使用已经在另一个文档Tor工具使用手册中详细介绍，这里主要介绍在没有图形界面的Linux服务器上安装Tor内核实现Tor代理功能。&#xA;二、安装 以下的安装在是centos6.5_64x系统上进行的。 centos系统默认yum源是找不到tor安装包的，若yum install tor提示未找到安装包，需要添加epel yum外部源。EPEL (Extra Packages for Enterprise Linux) 是Fedora小组维护的一个软件仓库项目，为RHEL/CentOS提供他们默认不提供的软件包。这个源兼容RHEL及像CentOS和Scientific Linux这样的衍生版本。&#xA;安装步骤如下： yum install tor 若是提示未找到tor安装包，查看 /etc/yum.repos.d/下是否有epel.repo文件，若没有，说明系统未添加epel yum外部源，需要手动添加，若已经添加epel外部源，可直接安装tor，则跳过2-6步骤。 根据你的操作系统，从网站获取对应的epel 的安装包，centos6.5_64位系统获取的安装包如下 （查看系统版本指令lsb_release -a &amp;amp;&amp;amp; uname -a）wget http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm sudo rpm -ivh epel-release-6-5.noarch.rpm 安装成功后可看到 /etc/yum.repos.d/目录下多了epel.repo 与epel-testing.repo文件 yum clean all yum makecache yum install tor 三、启动 安装Tor成功之后，就可以启动Tor了。需要注意的是Tor必须以非root用户启动，否则会启动失败。可以新建一个用户或使用已经存在的其他用户。新建用户操作可参考如下&#xA;useradd admin -d /home/admin passwd admin chown -R admin:admin /home/admin chown -R admin:admin /var/run/tor 切换到用户admin运行Tor，成功运行Tor会显示以下打印 Feb 16 06:33:41.</description>
    </item>
    <item>
      <title>如何在Windows系统上设置Tor</title>
      <link>https://anwangtanmi.github.io/posts/fcb8b7fc70a4a7b15710f85fcf550156/</link>
      <pubDate>Fri, 23 May 2014 15:36:14 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/fcb8b7fc70a4a7b15710f85fcf550156/</guid>
      <description>首先介绍一下Tor，Tor其实是The Onion Routing的缩写，即洋葱路由，目前已经发展到第三代了。&#xA;它的最初的设计目的是防止要访问的目的网站追踪连接的来源，从而保护用户的隐私，提高安全性。通俗一点说，就是为了隐匿你的身份。也就是说，你随便在什么网站发布了任何信息，理论上都是查不到你的，即使你的包在任何中间传输节点上被截获也没关系。&#xA;另外，在国内还有一个非常现实的作用，就是可以翻墙。&#xA;为什么叫洋葱代理呢？这个名字我觉得起的还是非常形象的。&#xA;在Tor网络中，任何连接从它的起点，到最终的目的地，中间都会经过3个节点。这些节点之间都是点对点加密的。从起点到第一个中继节点（Relay）间，经过三次加密。到达第一个节点后解密一次，获得下一跳中继节点的地址再传输，这样从第一个中继节点到第二个中继节点间就有两次加密，并且第一个中继节点只知道第二个中继节点的地址，而不知道第三个中继节点的地址。当信息到达第二个中继节点后，再解一次密，再传给第三个中继节点。而到第三个中继节点后，再解一次密，再发送给目的地址。这就好比剥洋葱，每到一个节点剥一层（为什么不是剥包菜？）。&#xA;这样做的好处是，任何一个传递节点都不能够完全知道数据的起点和终点。对于目的网站来说，它只能得到最后一个传递节点的IP地址。通过Tor，就可以完全影藏发送数据的人（据说美剧《纸牌屋》里面的黑客用的就是这个）。&#xA;这里就有一个问题，细心的读者一定发现了，那就是第三个节点已经可以得到最终完全没有加密的原始数据了。这样其实非常不安全，不怀好意的人就可以在最终传递节点上安装抓包工具，抓到应用层的信息。所以，如果你要交流的是非常敏感的信息，请使用安全的端到端协议。例如，如果你要使用用户名和密码登陆一个网站，请确保使用HTTPS连接，否则会存在风险。&#xA;这里还有一个问题，Tor的客户端是如何知道Tor网络中的中继节点有哪些的呢？这里有一个概念，叫目录服务器（Directory Server）。目前，官方的目录服务器一共有9台，它们之间会定期同步数据。如果想成为中继节点，Tor客户端必须要向其中一台目录服务器注册自己。而且Tor的客户端是不用直接连接到官方的目录服务器来获得所有的中继节点信息的，而是通过所谓的目录镜像（Directory Mirror）。这些目录镜像会定期的从官方的目录服务器上拷贝一份最新的数据。这样做的好处是分担了目录服务器的负担，事实上，大部分中继节点都被配置成了目录镜像。&#xA;有了前面介绍的中继节点和目录服务器的概念，这里大致介绍一下Tor的连接过程。&#xA;1）首先，Tor的客户端会先从目录服务器或者目录镜像上获得当前Tor网络中所有中继节点的信息；&#xA;2）然后，该客户端会随机的在所有中继节点列表中选择3个，并建立连接；&#xA;3）如果Tor客户端想访问另外一个地址，则会再随机选取3个中继节点，建立另外一条链接，而不会用前面建立的那条虚电路。&#xA;如果所有的中继节点都是通过从目录服务器或者目录镜像得到的，那想封杀Tor就很简单了，直接读取目录服务器，把所有中继节点IP地址都拿到，直接加到黑名单中就行了。&#xA;事实上，很多地方的政府也是这么做的。那有没有办法绕过这种限制呢？Tor为此还专门引入了所谓的网桥（Bridge）节点。&#xA;什么是网桥节点呢？其实它也是中继节点（所以网桥节点有时也较网桥中继节点，Bridge Relay），只不过和普通中继节点不同的是，它不会把自己注册到官方的目录服务器中，这样就不能方便的查到了，也就没法阻挡了。为什么称作网桥节点，因为它是用来在监管网络和自由网络之间的一个桥接。但这也是面双刃剑，想挡的人看不到了，想用的人也没法方便的拿到。&#xA;上面讲了那么多原理和概念，下面我们讲讲如何配置一个Tor客户端，有了上面这些概念做铺垫之后，讲起来会更加的容易。&#xA;1）首先下载并安装Tor的客户端&#xA;网址是：https://www.torproject.org/download/download.html.en，进去之后可以看到很多版本可以选择，可以随便选择下载“Vidalia Bridge Bundle”或者是“Vidalia Relay Bundle”。&#xA;下载完成后，直接点击安装就好了，这里不再赘述。&#xA;2）用Vidalia配置Tor客户端&#xA;安装好后，打开Vidalia，&#xA;然后选择“Settings”，进入设置界面，选择“Sharing”，选择“Run as a client only”，然后点“OK”。&#xA;理论上过一段时间之后，Tor客户端就会连接上Tor网络，但目前Tor只提供Socks代理，如果想要用HTTP/HTTPS代理，还需要再加一个Socks代理转HTTP/HTTPS代理的软件，这里介绍使用Polipo。&#xA;3）安装并配置Polipo&#xA;Polipo是一个非常轻量级的Web代理服务器，其主页在这：http://www.pps.univ-paris-diderot.fr/~jch/software/polipo/，可以从上面下载到Windows版本。&#xA;下载下来是一个zip包，直接解压出来就可以用了。&#xA;解压出来后除了polipo的可执行文件之外，还有配置文件的示例，可以直接在上面更改，也可以拷贝一份出来后再更改。&#xA;其中有几项是必须要更改的。找到“socksParentProxy”，去掉前面的“#”，改成”localhost:9050″，9050是Tor客户端默认开的Socks代理端口。&#xA;再找到“diskCacheRoot”，去掉前面的“#”，内容留空，表示不用磁盘缓存功能。&#xA;好了，就修改这两项就可以使用了，非常简单吧。打开Windows的字符控制台cmd，切换的polipo的解压路径，敲入命令&#xA;可以看到，监听端口是8123，这就是HTTP/HTTPS代理的端口，直接在浏览器里面设置代理服务器为localhost或者是127.0.0.1，端口是8123就可以用了。&#xA;到此，基本配置就结束了。但是，有时候Tor客户端会连接不上Tor网络，通常这是由下面原因造成的：&#xA;1）必须要使用代理服务器才能上外网&#xA;这时可以给Tor客户端添加代理服务器。在”Settings”窗口内，选择“Network”，在下面的选择项内选“I use a proxy to access the Internet”。&#xA;然后填上代理服务器地址，端口，验证所用的用户名和密码，最后选择代理的种类，点“OK”就好了。&#xA;2）很不幸，你所在的网络已受监控，Tor网络中的目录服务器和中继节点都被封杀了（GFW）&#xA;这时就要使用前面说的网桥节点了。要想设置网桥，首先得获得网桥节点的信息。&#xA;怎么获得呢？有两个办法，一是找你的朋友，他所在的网络没被监控是自由的，让他帮忙设置他自己的Tor客户端为网桥模式，然后把他自己的网桥信息告诉你；二是通过发送邮件到[email protected]，邮件内容包含“get bridges”，最好使用gmail发送。过一阵子后会收到回复邮件，里面会有网桥节点信息的列表。&#xA;下面就是把这些网桥添加到Tor客户端里，还是在“Settings”下的“Network”里。&#xA;直接一个一个拷贝黏贴，然后添加就好了。&#xA;好了，一般通过上面两个方法基本上都可以连接上Tor网络了，当然你的设备首先得能上网。&#xA;这里还有一个问题值得提一下，这就是所谓的“陷阱节点”。什么是陷阱节点呢，就是某些政府部门故意假设的一下中继节点，故意不让你连出去，或者更可怕的是在上面抓取所有出去的包。如果很不幸，你选的出口节点（也就是第三个中继节点）正好是其中某一个“陷阱节点”，那你所有发送的数据都在监控之中，这是很可怕的。有解决的办法吗？Tor想到了这点，其配置项中允许将来自某一个国家的节点排除在选择之外。&#xA;如果想把来自香港的所有中继节点排除出去，可以在配置文件中加一项：&#xA;ExcludeNodes {hk} 这样，Tor客户端会主动规避来自香港的中继节点，但如果Tor在排除之后的中继节点中建立不起来虚拟线路的时候，还是会尝试使用那些排除在外的中继节点。所以，如果要再狠一点，哪怕不能连接也完全不考虑这些排除的节点，则可以再在配置文件中加这一项： StrictNodes 1 除此之外，还可以精确指定出口节点所在的国家：</description>
    </item>
  </channel>
</rss>
