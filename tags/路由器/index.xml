<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>路由器 on 暗网探秘</title>
    <link>https://anwangtanmi.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/</link>
    <description>Recent content in 路由器 on 暗网探秘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 30 Dec 2017 13:04:12 +0800</lastBuildDate>
    <atom:link href="https://anwangtanmi.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>教你如何五分钟内使用 shodan 黑进路由器</title>
      <link>https://anwangtanmi.github.io/posts/5fa08884f6d0c894557edfbe787534b8/</link>
      <pubDate>Sat, 30 Dec 2017 13:04:12 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/5fa08884f6d0c894557edfbe787534b8/</guid>
      <description>最近又重新用了把 shodan 这个神器，shodan 这个网站提供了全网所有设备开放端口的各种信息，这也就给我们的攻击带来了遍历。如果某个软件存在漏洞，而这个软件是类似于 web 服务那种会监听某个端口提供服务的，那么我们就可以利用 shodan 的搜索功能大批量的找到互联网上那些存在漏洞的服务。&#xA;就拿弱密码来说吧，我们知道有很多路由器的 web 管理界面的默认密码人们是不会修改的，而一些路由器的 web 页面甚至暴露在了公网上。更加搞笑的是，有些品牌的路由器甚至把自己的默认密码写在了 http 响应的 header 中。&#xA;HTTP/1.0 401 Unauthorized Date: Sat, 30 Dec 2017 03:44:21 GMT Server: Boa/0.94.14rc21 Accept-Ranges: bytes Connection: Keep-Alive Keep-Alive: timeout=10, max=1000 WWW-Authenticate: Basic realm=&#34; Default Name:admin Password:1234 &#34; Content-Type: text/html 就比如上面这个，直接告诉你我是 basic 认证，默认的用户名和密码是 admin 和1234。可能有的安全意识较强的用户会修改掉默认用户名和密码，但是仍然有很多人是不会去改的。&#xA;研究了一发 shodan 的搜索语法，只要在搜索框内输入default name:admin password， 就可以列出所有这种类型的路由器了，接着就可以一个个去尝试了，基本尝试四五个就能发现一个能登陆进去的。如果嫌一个个尝试太过麻烦，还可以写一个 python 脚本，调用 shodan 的 API 来自动化测试。&#xA;import shodan import requests SHODAN_API_KEY = &#34;your api key&#34;</description>
    </item>
    <item>
      <title>解决弱电箱的电源问题</title>
      <link>https://anwangtanmi.github.io/posts/2a74fe7e9e74e34fbbda9b8f3aa3cfc3/</link>
      <pubDate>Mon, 29 Aug 2011 15:28:05 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/2a74fe7e9e74e34fbbda9b8f3aa3cfc3/</guid>
      <description> 解决弱电箱的电源问题 今天坛子里一位TX给我发短消息，说他家弱电箱刚好放得下路由器。但弱电箱内无电源，无法同时上网，问我如何处理。&#xA;这个问题相当好，极具普遍性，现在的家装，没给弱电箱去电源线的例子实在太多了。&#xA;我今天下午也以短消息的方式，给了这位网友一明一暗两个布线建议，但这两个建议都有一点点小小的施工（主要是钻孔），不爽。实际上给弱电箱供电还有第三种方案，有兴趣的朋友请往下看。&#xA;方法很简单，一点都不用破坏墙体，只需要在一个电话插座里面接两根线，就能解决弱电箱无电源的问题。简单点说，就是用电话线作为变压器的直流输出线，给路由器供电。&#xA;分为以下六步：&#xA;1、将路由器的变压器直流输出端头子剪下来放在一边备用。&#xA;2、在室内找个电话插座，从面板上取出电话线，并剥开线头子备用。注意最好是网络和电话从一个面板出来那种（商家管这种弱电面板叫做网络+电话）.&#xA;3、继续第2步中电话插座这面的工作：将变压器的输出线和电话线连接起来。&#xA;4、弱电箱那面的工作：将第1步剪下备用的变压器输出头子和弱电箱里的那根电话线连接起来，注意这根线和第3步中的那根电话线是同一根线。&#xA;5、剩下的事情就简单了，变压器插进强电插座，弱电箱那面将电源头子插进路由器就OK了。此时9V左右的直流电就通过电话线源源不断地送进弱电箱里面的路由器了。注意，电话线里面走的同样是弱电。&#xA;6、最后一步，利用网线中的两根线作为电话线，恢复被占用的那个电话插座。&#xA;最后给第六步中的利用网线走电话来个注解：&#xA;网线中的8根线，百兆上网只用到其中4根(当然千兆网要用到全部8根线,不过个人认为那还有点可望不可及，毕竟目前大多1兆进户)，另4根书上说是解决串扰，实际使用，用来走电话线没问题。这里有做综合布线的朋友可能碰到过，现在有些甲方为节约成本，给办公楼布线时，水平布线子系统就是用网线中的另外4根走电话，美其名曰可做“语音数据互换”。实际使用起来确实没问题，这个我有亲身体会。当然家装嘛，自已的房子，网线电话线分开走当然更好，说不准哪天睡一觉起来，网络就变成千兆到桌面了呢？毕竟电话线不贵。 </description>
    </item>
    <item>
      <title>神奇的Tor带你冲浪自由的百科全书Wiki</title>
      <link>https://anwangtanmi.github.io/posts/2c799617e27ac1c96529528664bae967/</link>
      <pubDate>Fri, 16 Jun 2006 13:49:00 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/2c799617e27ac1c96529528664bae967/</guid>
      <description> 很久的时候就听说过&#xA;Wiki（维基百科全书），也在很多的地方看到过Wiki的链接，每次好奇的点击过去，总是无法打开的失望，从此以后头脑中多了一份对于Wiki的牵挂，一份不舍，为什么我就上不去呢？&#xA;最后，我看到了一些关于Tor的介绍，标题起的就很吸引人—–跨越人造的鸿沟：Tor代理服务器。看了之后，大概的有了些印象，下面是wiki上摘录的一些：&#xA;Tor是第二代&#xA;onion routing（洋葱路由）的一种实现，用户通过Tor可以在因特网上进行&#xA;匿名交流。最初该项目由&#xA;美国海军研究实验室（US Naval Research Laboratory）赞助。&#xA;2004年晚些时候，Tor成为&#xA;电子前哨基金会（Electronic Frontier Foundation，&#xA;EFF）的一个项目。2005年后期，EFF不再赞助Tor项目，但他们继续维持Tor的官方网站。&#xA;匿名外连 Tor用户在本机运行一个洋葱代理服务器(onion proxy），这个代理周期性地与其他Tor交流，从而在Tor网络中构成虚拟环路（virtual circuit）。 Tor是在7层protocol stack中的application layer进行加密（也就是按照’onion’的模式）而它之所以被称为onion是因为它的结构就跟洋葱相同，你只能看出它的外表而想要看到核心就必须 把它层层的剥开。即每个router间的传输都经过symmetric key来加密，形成有层次的结构。它中间所经过的各节点，都好像洋葱的一层皮，把客户端包在里面，算是保护信息来源的一种方式，这样在洋葱路由器之间可以 保持通讯安全。同时对于客户端，洋葱代理服务器又作为SOCKS接口。一些应用程序就可以将Tor作为代理服务器，网络通讯就可以通过Tor的虚拟环路来进行。&#xA;进入Tor网络后，加密信息在路由器间传递，最后到达“退出节点”（exit node），明文数据从这个节点直接发往原来的目的地。对于目的主机而言，是从“退出节点”发来信息。&#xA;由于在TCP数据流的级别通讯，Tor显得卓然独立于其他匿名网络。通过使用Tor，一般的应用程序都可以实现匿名，比如IRC、即时通讯，以及浏览网页。浏览网页时，Tor常常与Privoxy联合使用，Privoxy是一个代理服务器，可以在应用层增加保护隐私。&#xA;有了Tor之后，我们就可以自由的上自己想上的网站了，这个要比一般的代理服务器好了很多。我们在&#xA;Tor的官方站点上可以下载，安装后将socket代理设置为localhost:9050，你就可以自由冲浪了。&#xA;Tor的页面中有祥细的&#xA;教程，那里的英文也不是很难，几个简单的步骤就搞定了。而且tor还专门针对firefox有一个torbutton的扩展，可以通过这个扩展来快速的切换是否使用tor。&#xA;不多说了，enjoy it~~~~~~~~~ </description>
    </item>
  </channel>
</rss>
