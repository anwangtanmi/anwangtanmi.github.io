<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 暗网探秘</title>
    <link>https://anwangtanmi.github.io/tags/linux/</link>
    <description>Recent content in Linux on 暗网探秘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 11 Apr 2020 10:48:21 +0800</lastBuildDate>
    <atom:link href="https://anwangtanmi.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何使用tor代理网络</title>
      <link>https://anwangtanmi.github.io/posts/2ce9d57e94b7ca6c5f5cdc8bb052d5d9/</link>
      <pubDate>Sat, 11 Apr 2020 10:48:21 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/2ce9d57e94b7ca6c5f5cdc8bb052d5d9/</guid>
      <description> 如何使用tor代理网络 为什么要用tor kali中配置tor代理服务 注意 为什么要用tor tor网络使用多层代理，每间隔十分钟会换一次代理，能够更好的匿名访问网络。&#xA;kali中配置tor代理服务 我使用的是kali linux，安装tor命令如下&#xA;apt-get install tor 安装tor服务后，编辑/etc/proxychains.conf文件，该文件中规定了tor网络代理服务器的数量和顺序。注释掉strict_chains，启用dynamic_chains，以防止代理服务器停止工作或者遇到重载荷导致的proxychain失效。&#xA;vim /etc/proxychains.conf&#xA;编辑/etc/proxychains.conf文件中的[ProxyList]，添加开放代理，进一步模糊自己的ip地址&#xA;终端窗口启动tor服务&#xA;service tor start 查看tor运行状态&#xA;service tor status 确定代理是否已经生效&#xA;proxychains firefox www.whatismyip.com&#xA;可以看到ip地址非本机原有ip地址，即可验证成功&#xA;注意 tor提供的只是匿名服务，但它不能保证隐私。输入个人凭证会暴露自己的信息。 在tor浏览器套件中的漏洞，据称被执法部门用于探测系统并获取用户信息。 ProxyChains不会处理UDP流量。 浏览器中的应用程序也可能会获取你的ip。 点赞 收藏 分享 文章举报 ch_dq 发布了8 篇原创文章 ·&#xA;获赞 8 ·&#xA;访问量 4166 私信 关注 </description>
    </item>
    <item>
      <title>如何搭建Tor网站</title>
      <link>https://anwangtanmi.github.io/posts/8e31e25fda1d20418003a4a83a5407ac/</link>
      <pubDate>Tue, 10 Mar 2020 10:30:23 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/8e31e25fda1d20418003a4a83a5407ac/</guid>
      <description> 首先安装web服务器（nginx）&#xA;安装tor服务器&#xA;修改nginx的监听端口到8080&#xA;然后再来配置tor&#xA;vim /etc/tor/torrc 添加以下两行 HiddenServiceDir /var/lib/tor/hidden_service/ HiddenServicePort 80 127.0.0.1:8080 开启tor服务&#xA;然后系统会自动生成私钥和onion地址&#xA;点赞 收藏 分享 文章举报 偷一个月亮 发布了76 篇原创文章 ·&#xA;获赞 34 ·&#xA;访问量 1万+ 私信 关注 </description>
    </item>
    <item>
      <title>I2P和TOR 有趣网络精灵</title>
      <link>https://anwangtanmi.github.io/posts/fb4002284974b3970e7b8f0a3e5f3349/</link>
      <pubDate>Wed, 11 Dec 2019 16:59:19 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/fb4002284974b3970e7b8f0a3e5f3349/</guid>
      <description> I2P 大蒜路由&#xA;I2P 是洋文“Invisible Internet Project”的缩写。官方网站是 https://geti2p.net/，维基百科的介绍在“这里”。&#xA;I2P 在很多方面跟 Tor 相似——也是开源软件、也采用分布式、也强调隐匿性。&#xA;TOR 洋葱路由&#xA;TOR 使用【同一条网络链路】实现数据的发送和接收；&#xA;I2P 使用【多条网络链路】发送数据和接受数据——并且发送和接收数据的链路，数量可以是不同的&#xA;搭建i2p详见https://file.jimmyho.net/?dir=i2p%E7%9B%B8%E5%85%B3%E6%96%87%E4%BB%B6&#xA;点赞 收藏 分享 文章举报 zhowlay 发布了16 篇原创文章 ·&#xA;获赞 0 ·&#xA;访问量 3258 私信 关注 </description>
    </item>
    <item>
      <title>如何在linux环境下搭建Tor代理服务器</title>
      <link>https://anwangtanmi.github.io/posts/a779e4aa38b44aba1de19cd584034754/</link>
      <pubDate>Wed, 03 May 2017 15:33:42 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/a779e4aa38b44aba1de19cd584034754/</guid>
      <description>如何在linux环境下搭建Tor代理服务器 一、简介 首先， Tor官方提供已不再提供单独的Tor内核下载，只提供集成了Tor内核的Tor-Browser下载。Tor Browser 内置了Tor，firefox，配置工具等，使用方便，但是安装和启动需要依赖GUI图形界面，在Windows或者Mac系统上推荐安装Tor-Browser，会简便很多。如果Linux上没有安装图形界面系统，如代理服务器VPS等，是无法安装Tor-Browser的，这个情况下可以通过安装Tor内核软件的方式实现TOR代理功能。&#xA;Tor Browser的安装和使用已经在另一个文档Tor工具使用手册中详细介绍，这里主要介绍在没有图形界面的Linux服务器上安装Tor内核实现Tor代理功能。&#xA;二、安装 以下的安装在是centos6.5_64x系统上进行的。 centos系统默认yum源是找不到tor安装包的，若yum install tor提示未找到安装包，需要添加epel yum外部源。EPEL (Extra Packages for Enterprise Linux) 是Fedora小组维护的一个软件仓库项目，为RHEL/CentOS提供他们默认不提供的软件包。这个源兼容RHEL及像CentOS和Scientific Linux这样的衍生版本。&#xA;安装步骤如下： yum install tor 若是提示未找到tor安装包，查看 /etc/yum.repos.d/下是否有epel.repo文件，若没有，说明系统未添加epel yum外部源，需要手动添加，若已经添加epel外部源，可直接安装tor，则跳过2-6步骤。 根据你的操作系统，从网站获取对应的epel 的安装包，centos6.5_64位系统获取的安装包如下 （查看系统版本指令lsb_release -a &amp;amp;&amp;amp; uname -a）wget http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm sudo rpm -ivh epel-release-6-5.noarch.rpm 安装成功后可看到 /etc/yum.repos.d/目录下多了epel.repo 与epel-testing.repo文件 yum clean all yum makecache yum install tor 三、启动 安装Tor成功之后，就可以启动Tor了。需要注意的是Tor必须以非root用户启动，否则会启动失败。可以新建一个用户或使用已经存在的其他用户。新建用户操作可参考如下&#xA;useradd admin -d /home/admin passwd admin chown -R admin:admin /home/admin chown -R admin:admin /var/run/tor 切换到用户admin运行Tor，成功运行Tor会显示以下打印 Feb 16 06:33:41.</description>
    </item>
    <item>
      <title>linux常用命令基本格式</title>
      <link>https://anwangtanmi.github.io/posts/357f63bb3d05fcbb80ed9e05d35321f2/</link>
      <pubDate>Thu, 11 Aug 2016 15:00:19 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/357f63bb3d05fcbb80ed9e05d35321f2/</guid>
      <description>[root@VM_55_31_centos ~]# root当前登录用户 VM_55_31_centos主机名，默认主机名localhost windows中局域网内主机名，ip不能有相同的，否则无法上网通信，linux无限制，没有采用这种协议 ~当前所在的目录，家目录 “#”超级用户提示符 $普通用户提示符&#xA;/root root用户的家目录 /home/user1/ 普通用户的家目录&#xA;pwd：显示当前所在位置 7种文件类型&#xA;命令 选项 参数&#xA;ls： -a 所有目录 -l 详细信息&#xA;total 19672 -rw-------. 1 root root 2523 Apr 21 15:10 anaconda-ks.cfg drwxr-xr-x 3 root root 4096 Jul 30 22:29 gitrepository drwxr-xr-x 9 1001 1001 4096 Jul 24 14:48 nginx-1.10.1 -rw-r--r-- 1 root root 909077 Jun 1 00:38 nginx-1.10.1.tar.gz drwxr-xr-x 18 git git 4096 Jul 25 13:29 php-5.6.24 -rw-r--r-- 1 root root 19188810 Jul 21 17:30 php-5.</description>
    </item>
    <item>
      <title>linux下软件的安装与卸载</title>
      <link>https://anwangtanmi.github.io/posts/1ef81d8b1273f5d016ca1ba371cd739e/</link>
      <pubDate>Tue, 24 Jun 2014 09:53:19 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/1ef81d8b1273f5d016ca1ba371cd739e/</guid>
      <description>【转载】http://bbs.chinaunix.net/thread-1921235-1-1.html&#xA;不管是哪个平台下，软件的安装与卸载是每一位计算机操作者所必需掌握的知识。Windows之所以易用、好掌握，也在于它软件安装、卸载完全图形化操作、直观。反观Linux，就令人感觉有些困惑。Linux下软件的安装除了二进制形式的软件分发外，还有许多以源码形式分发的软件包。 1、以“rpm”为后缀的二进制软件包 安装：rpm -ivh *.rpm 卸载：rpm -e packagename 参数-i表示安装，-v是校验，-h是用散列符显示安装进度，-e是删除软件包，packgename代表软件包名，也就是版本号前面那个字符串。 卸载软件前，应首先知道软件包在系统中注册的名称，可以使用命令：rpm -q -a 结合grep来查询。确定了要卸载的软件包名后，就可以开始卸载了，命令如上所示。 由于系统中各个软件包之间相互有依赖关系，如果因存在这种依赖关系而不能卸载，rpm将给予提示并停止卸载，此时，可以使用命令 rpm -e –nodeps packagename 来忽略依赖关系，直接进行卸载。当然，忽略依赖关系的卸载，可能导致系统中其它一些软件无法正常使用，卸载前应三思。 2、以“src.rpm”为后缀的源码软件包 安装：先使用命令 rpm -rebuild *.src.rpm 将源代码编译并在/usr/src/dist/RPMS下生成二进制的rpm包，然后再 rpm -ivh *.rpm 安装该二进制包即可。 卸载：同上，rpm -e packgename 3、以“tar.gz”、“.bz2”为后缀的二进制软件包 安装：tar zxvf *.tar.gz 、tar jxvf *.bz2 参数-z调用gzip，-x是解包，-v是校验，-f指定包的文件名，此项通常必选，-j调用bzip。当然，这些参数也不是绝对要加上的，比如-v参数，或者也可以使用其它一些参数，只不过我习惯上这么写。 卸载：手动删除 4、以“tar.gz”、“.bz2”为后缀的源代码软件包 先使用命令 tar zxvf *.tar.gz 或 tar jxvf *.bz2进行解压，然后进入解压后的目录，接着就是众所周知的三步曲： ./configure（配置）、make（编译）、make install（安装）。建议解压后不要急着进行所谓的“三步曲”，而应该先看下相关的说明文件，了解软件安装需要哪些条件，以便在配置的时候提供相应的参数。 我通常的做法是，进入解压后的目录后，先用ls命令查看一下该目录下都有哪些文件。通常在解压后的目录里，会有一个“Install”的纯文本文件，不妨先看看里面的内容，里面详细讲述了软件包的安装方法。当然，有时候也会发现这个“Install”是个可执行文件。 我遇到过里面带有setup这种类似Windows下软件安装的可执行文件（当然，这种情况是比较少数的），这对于不太习惯使用Linux的用户来说，是比较方便的。还有，就是一个后缀为“bin”的安装文件，安装前先查看一下它的执行权限。如果不具有可执行权限，请先赋予它执行的权限，再像正常的可执行文件那样运行即可。 安装完毕后，应清除编译过程中产生的临时文件和配置过程中产生的文件，可以使用命令：make clean 以及make distclean。 有些软件包的源代码在编译安装后可以使用 make uninstall 命令来进行卸载，如果没有提供此功能，则该软件的卸载也只有手动删除。由于软件可能将文件分散安装在系统的多个目录中，手动删除往往很难将它删除干净，这也许是很多人比较头痛的地方。所以，通常的做法是，在编译前的配置阶段，指定软件将要安装到的目标路径，即 “./configure –prefix=目录名”，这样可以使用 “rm -rf 软件的目录名”这一命令来进行干净彻底的卸载。&#xA;点赞 1 收藏 分享 文章举报 无敌洋葱头 发布了5 篇原创文章 ·</description>
    </item>
    <item>
      <title>Tor源码分析十 — 连接和链路</title>
      <link>https://anwangtanmi.github.io/posts/b4625b290a2fd620f10686ef483485a8/</link>
      <pubDate>Fri, 21 Jun 2013 22:01:00 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/b4625b290a2fd620f10686ef483485a8/</guid>
      <description>源码分析到这个部分，为了让大家明白源码中的编码逻辑，不得不开始从头梳理程序内部的复杂连接和链接组织形式。否则大家后期会更加一头雾水。笔者开始分析源码之时，没有这些宏观的概念，只能死嚼代码，硬猜硬想，再加以检查代码进行验证，才得以明白程序的主要框架逻辑。如果再以猜测验证的模式向大家讲述源码，必定会越来越混乱。所以，在本节之中，我们会将系统中所有的连接类型，链路类型和他们之间的关系和代码之中的关联方式尽量讲明。若大家遇到不明晰的部分，可以参照代码进行查阅。&#xA;在我们进行详细分析之前，先再次给出连接和链接的框架位置图。这个简单的层次图帮助我们理解不同连接和链接所处层次的位置关系，其实已经在我们分析OR连接源码之时给出，之时当时没有进行过多的深入介绍。&#xA;DIR连接，LISTENER连接　|&#xA;－－－－－－－－－－－－－－－－－　|&#xA;AP连接，EXIT连接……　Tor协议上层 |&#xA;－－－－－－－－－－－－－－－－－－－－－－－－－－－－ |　应用层&#xA;Circuit链路……　Tor协议中层 |&#xA;－－－－－－－－－－－－－－－－－－－－－－－－－－－－ |&#xA;OR连接……　Tor协议下层 |&#xA;－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－&#xA;TLS连接　传输层&#xA;1. 连接 很明显，系统中的连接类型多种多样，各有各自的不同职能。在此处，我们先罗列出所有系统中存在的连接，其后再对一些我们比较重视的连接类型进行相关说明。&#xA;//OR监听连接：本地用于监听远端传来的OR请求，为每个新请求建立一个OR连接；OR监听连接本地全局只有一个； #define CONN_TYPE_OR_LISTENER 3 //OR连接：基于TLS连接的，主要负责Tor系统内主机之间相互通信的连接；OR连接数量表征本地与多少台主机建立了互联关系，因为他们是一一对应的； #define CONN_TYPE_OR 4 //EXIT连接：翻译为出口连接是因为该连接会与远端服务器建立socket连接并传递数据； #define CONN_TYPE_EXIT 5 //AP监听连接：本地用于监听本地应用程序的服务请求而设立的监听连接，为每个服务请求建立一个AP连接；AP监听连接本地全局只有一个； #define CONN_TYPE_AP_LISTENER 6 //AP连接：基于链路的，主要负责为客户端请求寻找合适链路和传递数据；AP连接数量表征本地应用程序发出的连接请求数量，因为他们是一一对应的； #define CONN_TYPE_AP 7 //DIR监听连接：Tor系统目录服务器用于监听Tor系统内主机发出的目录相关请求，也就是说该类型连接只在目录服务器上存在； #define CONN_TYPE_DIR_LISTENER 8 //DIR连接：Tor客户端向Tor目录服务器发送目录请求时需要新建的连接，该连接需要通过AP连接为其转发请求，也就是说类似于普通应用程序的请求连接； #define CONN_TYPE_DIR 9 //CPUWORKER连接：用于在程序开启多进程解密服务的时候提供进程间通信，详细过程可以参看前面分析过的cpuworker部分文章；正常情况下未被使用； #define CONN_TYPE_CPUWORKER 10 //CONTROL监听连接：本地用于监听本地应用程序传递的控制指令或请求；（后期专门讲述，此处暂略） #define CONN_TYPE_CONTROL_LISTENER 11 //CONTROL连接：本地用于控制消息处理的连接；（后期专门讲述，此处暂略） #define CONN_TYPE_CONTROL 12 //以下三种连接由于非常少见，此处我们暂时略去； #define CONN_TYPE_AP_TRANS_LISTENER 13 #define CONN_TYPE_AP_NATD_LISTENER 14 #define CONN_TYPE_AP_DNS_LISTENER 15 很明显地，通过分析上面这些连接类型我们发现，对于客户端而言，最重要的连接类型无非就是DIR,AP,OR三种连接。这些连接之间的相互关联和作用帮助客户端应用程序将应用请求送入Tor系统，并再通过Tor系统的封装等操作将数据成功送出到远端目的地。下面我们来简要描述下整个系统运转的过程。 1.</description>
    </item>
    <item>
      <title>tcp 协议3次连接握手和4次结束握手(转自洋葱的专栏)</title>
      <link>https://anwangtanmi.github.io/posts/ba0938e33e2eddee2d6ec1e62ebc0229/</link>
      <pubDate>Thu, 23 Jun 2011 10:45:00 +0800</pubDate>
      <guid>https://anwangtanmi.github.io/posts/ba0938e33e2eddee2d6ec1e62ebc0229/</guid>
      <description>协议连接建立时3次握手的过程4次结束连接&#xA;TCP协议连接建立时3次握手的过程。 简述TCP协议连接建立时3次握手的过程。&#xA;根据TCP头部，说明下列3个包在连接建立过程中的次序.&#xA;0020 00 50 83 aa 46 49 3e dd 33 96 37 a3 a0 12 …P..FI&amp;gt;.3.7…&#xA;0030 16 a0 c4 c0 00 00 02 04 05 b4 04 02 08 0a d7 9b …………….&#xA;0040 62 b7 00 56 4a 2a 01 03 03 02 b..VJ*…. （1）&#xA;0020 83 aa 00 50 33 96 37 a2 00 00 00 00 a0 02 …..P3.7…….&#xA;0030 16 d0 84 1d 00 00 02 04 05 b4 04 02 08 0a 00 56 ……………V</description>
    </item>
  </channel>
</rss>
